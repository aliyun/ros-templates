ROSTemplateFormatVersion: '2015-09-01'
Description:
  zh-cn: 使用ROS模版部署Rancher高可用集群，含3台ECS，通过Kubernetes与SLB实现负载均衡，并配置DNS域名解析，确保安全组开放80,443端口，支持混合云及本地数据中心的Kubernetes集群管理。
  en: Deploy a high-availability Rancher cluster using ROS templates, comprising of
    3 ECS instances. Leverage Kubernetes in conjunction with SLB for load balancing,
    and configure DNS domain resolution to ensure accessibility. It is essential to
    open ports 80 and 443 on the security groups to facilitate external access. This
    setup supports the management of Kubernetes clusters across hybrid clouds and
    local data centers.
Parameters:
  VSwitchZoneId:
    Type: String
    Label:
      en: VSwitch Availability Zone
      zh-cn: 交换机可用区
    Description:
      en: Availability Zone ID.<br><b>note：<font color='blue'>before selecting, please
        confirm that the Availability Zone supports the specification of creating
        ECS resources,which is recommended to be different from other VSwitch Availability
        Zone</font></b>
      zh-cn: 可用区ID。<br><b>注： <font color='blue'>选择前请确认该可用区是否支持创建ECS资源的规格，建议与其他交换机可用区不同</font></b>
    AssociationProperty: ALIYUN::ECS::Instance:ZoneId
  VPC:
    Type: String
    Label:
      en: Existing VPC Instance ID
      zh-cn: 现有VPC的实例ID
    Description:
      en: Please search the ID starts with (vpc-xxx)from console-Virtual Private Cloud
      zh-cn: 现有虚拟专有网络的实例ID,控制台-VPC-专有网络下查询
    AssociationProperty: ALIYUN::ECS::VPC::VPCId
  VSwitch:
    Type: String
    Label:
      en: Existing VSwitch ID
      zh-cn: 网络交换机ID
    Description:
      en: Please search the business VSwitch ID starts with(vsw-xxx)from console-Virtual
        Private Cloud-VSwitches
      zh-cn: 现有业务网络交换机的实例ID,控制台-VPC-专有网络-交换机下查询
    AssociationProperty: ALIYUN::ECS::VSwitch::VSwitchId
    AssociationPropertyMetadata:
      VpcId: VPC
      ZoneId: VSwitchZoneId
  SecurityGroup:
    Type: String
    Label:
      en: Business Security Group ID
      zh-cn: 业务安全组ID
    Description:
      en: Please search the business security group ID starting with(sg-xxx)from console-ECS-Network
        & Security
      zh-cn: 现有业务安全组的实例ID,控制台-ECS-网络与安全-安全组下查询
    AssociationProperty: ALIYUN::ECS::SecurityGroup::SecurityGroupId
    AssociationPropertyMetadata:
      VpcId: VPC
  InstanceType:
    Type: String
    Label:
      en: Instance Type
      zh-cn: 实例规格
    Description:
      en: <font color='blue'><b>1.Before selecting the model please confirm that the
        current available zone under the model is in stock, some models need to be
        reported in advance</b></font>]<br><font color='blue'><b>2.List of optional
        models</font>]<br></b></font>[ecs.c5.large <font color='green'>2vCPU 4GiB
        Intranet bandwidth1Gbps In-grid sending and receiving packages30MillionPPSS</font>]<br></b>[ecs.c5.xlarge
        <font color='green'>4vCPU 8GiB Intranet bandwidth1.5Gbps In-grid sending and
        receiving packages50MillionPPS</font>]<br></b>[ecs.c5.2xlarge <font color='green'>8vCPU
        16GiB Intranet bandwidth2.5Gbps In-grid sending and receiving packages80MillionPPS</font>]
      zh-cn: <font color='blue'><b>1.选择机型前请先确认当前可用区下该机型是否有货，部分机型需要提前报备</b></font><br><font
        color='blue'><b>2.可选机型列表</font><br></b></font>[ecs.c5.large <font color='green'>2vCPU
        4GiB 内网带宽1Gbps 内网收发包30万PPS</font>]<br></b>[ecs.c5.xlarge <font color='green'>4vCPU
        8GiB 内网带宽1.5Gbps 内网收发包50万PPS</font>]<br></b>[ecs.c5.2xlarge <font color='green'>8vCPU
        16GiB 内网带宽2.5Gbps 内网收发包80万PPS</font>]
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    AssociationPropertyMetadata:
      ZoneId: VSwitchZoneId
  SystemDiskCategory:
    Type: String
    Label:
      en: System Disk Type
      zh-cn: 系统盘类型
    Description:
      en: '<font color=''blue''><b>Optional values:</b></font><br>[cloud_efficiency:
        <font color=''green''>Efficient Cloud Disk</font>]<br>[cloud_ssd: <font color=''green''>SSD
        Cloud Disk</font>]<br>[cloud_essd: <font color=''green''>ESSD Cloud Disk</font>]<br>[cloud:
        <font color=''green''>Cloud Disk</font>]<br>[ephemeral_ssd: <font color=''green''>Local
        SSD Cloud Disk</font>]'
      zh-cn: '<font color=''blue''><b>可选值：</b></font><br>[cloud_efficiency: <font
        color=''green''>高效云盘</font>]<br>[cloud_ssd: <font color=''green''>SSD云盘</font>]<br>[cloud_essd:
        <font color=''green''>ESSD云盘</font>]<br>[cloud: <font color=''green''>普通云盘</font>]<br>[ephemeral_ssd:
        <font color=''green''>本地SSD盘</font>]'
    Default: cloud_efficiency
    AllowedValues:
    - cloud_efficiency
    - cloud_ssd
    - cloud
    - cloud_essd
    - ephemeral_ssd
  SystemDiskSize:
    Type: Number
    Label:
      en: System Disk Space
      zh-cn: 系统盘空间
    Description:
      en: 'System disk size, range of values: 20-500, units: GB.'
      zh-cn: 系统盘大小, 取值范围：[20, 500], 单位：GB。
    Default: 20
  Password:
    Type: String
    Label:
      en: Instance Password
      zh-cn: 实例密码
    Description:
      en: Server login password, Length 8-30, must contain three(Capital letters,
        lowercase letters, numbers, ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol
        in).
      zh-cn: 服务器登录密码,长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）。
    ConstraintDescription:
      en: Length 8-30, must contain three(Capital letters, lowercase letters, numbers,
        ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol in).
      zh-cn: 长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）。
    AssociationProperty: ALIYUN::ECS::Instance::Password
  LoadBalancerSpec:
    Type: String
    Label:
      en: Instance Specification
      zh-cn: 实例规格
    Description:
      en: Instance specifications, see detail：</b><a href='https://www.alibabacloud.com/help/doc-detail/85939.html'
        target='_blank'><b><font color='blue'>Performance support type</b></font></a>
      zh-cn: 实例规格，详见：</b><a href='https://help.aliyun.com/document_detail/85939.html'
        target='_blank'><b><font color='blue'>性能保障型</b></font></a>
    Default: slb.s1.small
    AllowedValues:
    - slb.s1.small
    - slb.s2.small
    - slb.s2.medium
    - slb.s3.small
    - slb.s3.medium
    - slb.s3.large
  Bandwidth:
    Type: Number
    Label:
      en: SLB Elastic IP Bandwidth
      zh-cn: 弹性公网IP带宽
    Description:
      en: 'Value range: [0, 1000], Unit: Mbps.'
      zh-cn: 取值范围：[0, 1000]，单位：Mbps。
    Default: 10
    MinValue: 1
    MaxValue: 1000
  DomainName:
    Type: String
    Label:
      en: Domain Name
      zh-cn: 域名
    Description:
      en: Domain Name,fill in the applied domain name.
      zh-cn: 域名,填入已申请的域名名称。
  RR:
    Type: String
    Label:
      en: Host Record
      zh-cn: 主机记录
    Description:
      en: Host record, if you want to resolve @.exmaple.com, the host record should
        fill in "@" instead of empty</font>
      zh-cn: 主机记录，如果你想解析@.exmaple.com，主机记录应该填写“@”而不是“空”</font>
Resources:
  VpcEip:
    Type: ALIYUN::VPC::EIP
    Properties:
      Bandwidth:
        Ref: Bandwidth
      InternetChargeType: PayByTraffic
  DomainRecord:
    Type: ALIYUN::DNS::DomainRecord
    Properties:
      DomainName:
        Ref: DomainName
      RR:
        Ref: RR
      Type: A
      Value:
        Fn::GetAtt:
        - VpcEip
        - EipAddress
  SlbLoadBalancer:
    Type: ALIYUN::SLB::LoadBalancer
    Properties:
      VpcId:
        Ref: VPC
      VSwitchId:
        Ref: VSwitch
      AddressType: intranet
      InternetChargeType: paybytraffic
      LoadBalancerName:
        Fn::Join:
        - '-'
        - - StackId
          - Ref: ALIYUN::StackId
      LoadBalancerSpec:
        Ref: LoadBalancerSpec
      MasterZoneId:
        Ref: VSwitchZoneId
  EIPAssociation:
    Type: ALIYUN::VPC::EIPAssociation
    Properties:
      InstanceId:
        Ref: SlbLoadBalancer
      AllocationId:
        Ref: VpcEip
    DependsOn:
    - SlbLoadBalancer
    - VpcEip
  SlaveK8sServer:
    Type: ALIYUN::ECS::InstanceGroup
    Properties:
      ZoneId:
        Ref: VSwitchZoneId
      VpcId:
        Ref: VPC
      VSwitchId:
        Ref: VSwitch
      SecurityGroupId:
        Ref: SecurityGroup
      ImageId: centos_7_04
      AllocatePublicIP: true
      InstanceName: RancherSlaveServer
      InstanceType:
        Ref: InstanceType
      MaxAmount: 2
      Password:
        Ref: Password
      SystemDiskCategory:
        Ref: SystemDiskCategory
      SystemDiskSize:
        Ref: SystemDiskSize
      UserData:
        Fn::Replace:
        - ros-notify:
            Fn::GetAtt:
            - SlaveK8sWaitConditionHandle
            - CurlCli
        - Fn::Join:
          - ''
          - - '#!/bin/sh'
            - " \n"
            - "CreateUser() { \n"
            - "    groupadd docker \n"
            - "    useradd rancher -G docker \n"
            - "    echo \"123456\" | passwd --stdin rancher \n"
            - "} \n"
            - '

              '
            - "InstallDocker() { \n"
            - "    yum install -y yum-utils \n"
            - "    yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\
              \ \n"
            - "    yum makecache fast \n"
            - "    yum -y install docker-ce \n"
            - "    systemctl enable docker \n"
            - "    systemctl start docker \n"
            - "} \n"
            - '

              '
            - "SetDockerRegistry() { \n"
            - "    echo \"{\" >> /etc/docker/daemon.json \n"
            - "    echo '     \"registry-mirrors\": [\"https://ly7y5sh7.mirror.aliyuncs.com\"\
              ]' >> /etc/docker/daemon.json \n"
            - "    echo \"}\" >> /etc/docker/daemon.json \n"
            - "    systemctl daemon-reload \n"
            - "    systemctl restart docker \n"
            - "} \n"
            - '

              '
            - "main() { \n"
            - "    CreateUser \n"
            - "    InstallDocker \n"
            - "    SetDockerRegistry \n"
            - "} \n"
            - '

              '
            - "main \n"
            - "ros-notify \n"
  MasterK8sServer:
    Type: ALIYUN::ECS::InstanceGroup
    Properties:
      ZoneId:
        Ref: VSwitchZoneId
      VpcId:
        Ref: VPC
      VSwitchId:
        Ref: VSwitch
      SecurityGroupId:
        Ref: SecurityGroup
      ImageId: centos_7_04
      AllocatePublicIP: true
      InstanceName: RancherMasterServer
      InstanceType:
        Ref: InstanceType
      MaxAmount: 1
      Password:
        Ref: Password
      SystemDiskCategory:
        Ref: SystemDiskCategory
      SystemDiskSize:
        Ref: SystemDiskSize
      UserData:
        Fn::Replace:
        - ros-notify:
            Fn::GetAtt:
            - MasterK8sWaitConditionHandle
            - CurlCli
        - Fn::Join:
          - ''
          - - '#!/bin/sh'
            - " \n"
            - DomainName=
            - Ref: DomainName
            - '

              '
            - RR=
            - Ref: RR
            - '

              '
            - RootPassword=
            - Ref: Password
            - '

              '
            - 'MasterK8sIP=`ifconfig eth0 | awk ''/inet /{print $2}''`

              '
            - Slave1K8sIP=
            - Fn::Select:
              - '0'
              - Fn::GetAtt:
                - SlaveK8sServer
                - PrivateIps
            - '

              '
            - Slave2K8sIP=
            - Fn::Select:
              - '1'
              - Fn::GetAtt:
                - SlaveK8sServer
                - PrivateIps
            - '

              '
            - "CreateUser() { \n"
            - "   mkdir -p /tmp/rancher \n"
            - "   yum install -y expect \n"
            - "   groupadd docker \n"
            - "   useradd rancher -G docker \n"
            - "   echo \"123456\" | passwd --stdin rancher \n"
            - "} \n"
            - '

              '
            - "SSHConfig() { \n"
            - "   echo '[ ! -f /home/rancher/.ssh/id_rsa.pub ] && ssh-keygen -t rsa\
              \ -P \"\" -f ~/.ssh/id_rsa &>/dev/null' >> /tmp/auto_ssh.sh  \n"
            - '   echo ''while read line;do'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''        ip=`echo $line | cut -d " " -f1`'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''        user_name=`echo $line | cut -d " " -f2`'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''        pass_word=`echo $line | cut -d " " -f3`'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''expect <<EOF'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''        spawn ssh-copy-id -i /home/rancher/.ssh/id_rsa.pub
              $user_name@$ip'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''        expect {'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''                  "yes/no" { send "yes\n";exp_continue}''
              >> /tmp/auto_ssh.sh

              '
            - '   echo ''                  "password" { send "$pass_word\n"}'' >>
              /tmp/auto_ssh.sh

              '
            - '   echo ''        }'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''        expect eof'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''EOF'' >> /tmp/auto_ssh.sh

              '
            - '   echo ''done < /tmp/host_ip.txt'' >> /tmp/auto_ssh.sh

              '
            - "} \n"
            - '

              '
            - "SetHostsConfig() { \n"
            - "   echo \"${MasterK8sIP} rancher 123456\" >> /tmp/host_ip.txt \n"
            - "   echo \"${Slave1K8sIP} rancher 123456\" >> /tmp/host_ip.txt \n"
            - "   echo \"${Slave2K8sIP} rancher 123456\" >> /tmp/host_ip.txt \n"
            - '   su - rancher -c "sh /tmp/auto_ssh.sh"

              '
            - "} \n"
            - '

              '
            - "InstallDocker() { \n"
            - "    yum install -y yum-utils \n"
            - "    yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\
              \ stable-19.03 \n"
            - "    yum makecache fast \n"
            - "    yum -y install docker-ce-19.03.8 \n"
            - "    systemctl enable docker \n"
            - "    systemctl start docker \n"
            - "} \n"
            - '

              '
            - "SetDockerRegistry() { \n"
            - "    echo \"{\" >> /etc/docker/daemon.json \n"
            - "    echo '     \"registry-mirrors\": [\"https://ly7y5sh7.mirror.aliyuncs.com\"\
              ]' >> /etc/docker/daemon.json \n"
            - "    echo \"}\" >> /etc/docker/daemon.json \n"
            - "    systemctl daemon-reload \n"
            - "    systemctl restart docker \n"
            - "} \n"
            - '

              '
            - "InstallKubectl() { \n"
            - "   cd /tmp/rancher \n"
            - "   wget http://rancher-mirror.cnrancher.com/kubectl/v1.9.11/linux-amd64-v1.9.11-kubectl\
              \ \n"
            - "   mv linux-amd64-v1.9.11-kubectl kubectl \n"
            - "   chmod +x kubectl \n"
            - "   mv kubectl /usr/local/bin/kubectl \n"
            - "} \n"
            - '

              '
            - "InstallRKE() { \n"
            - "   cd /tmp/rancher \n"
            - "   wget http://rancher-mirror.cnrancher.com/rke/v1.1.4/rke_linux-amd64\
              \ \n"
            - "   mv rke_linux-amd64 rke \n"
            - "   chmod +x rke \n"
            - "   mv rke /usr/local/bin/rke \n"
            - "} \n"
            - '

              '
            - "InstallHelm() { \n"
            - "   cd /tmp/rancher \n"
            - "   wget http://rancher-mirror.cnrancher.com/helm/v3.3.0/helm-v3.3.0-linux-amd64.tar.gz\
              \ \n"
            - "   tar -zxvf helm-v3.3.0-linux-amd64.tar.gz \n"
            - "   chmod +x linux-amd64/helm \n"
            - "   mv linux-amd64/helm /usr/local/bin/helm \n"
            - "} \n"
            - '

              '
            - "SetK8sConfig() { \n"
            - "    cd /tmp/rancher \n"
            - '    echo ''nodes:'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo "  - address: ${MasterK8sIP}" >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo "    internal_address: ${MasterK8sIP}" >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    user: rancher'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    role: [controlplane,worker,etcd]'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo "  - address: ${Slave1K8sIP}" >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo "    internal_address: ${Slave1K8sIP}" >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    user: rancher'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    role: [controlplane,worker,etcd]'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo "  - address: ${Slave2K8sIP}" >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo "    internal_address: ${Slave2K8sIP}" >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    user: rancher'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    role: [controlplane,worker,etcd]'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''services:'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''  etcd:'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    snapshot: true'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    creation: 6h'' >> /tmp/rancher/rancher-cluster.yml

              '
            - '    echo ''    retention: 24h'' >> /tmp/rancher/rancher-cluster.yml

              '
            - "} \n"
            - '

              '
            - "StartK8sCluster() { \n"
            - "    chown rancher:rancher -R /tmp/rancher \n"
            - '    su - rancher -c "rke up --config /tmp/rancher/rancher-cluster.yml"

              '
            - "} \n"
            - '

              '
            - "SetKubectlEnv() { \n"
            - "    echo \"export KUBECONFIG=/tmp/rancher/kube_config_rancher-cluster.yml\"\
              \ >> /etc/profile \n"
            - "    source /etc/profile \n"
            - "    su - \n"
            - "} \n"
            - '

              '
            - "CheckK8sStatus() { \n"
            - '    k8s_state=`kubectl get pods --all-namespaces | awk ''{print$3}''
              |grep 0`

              '
            - "    echo \"${k8s_state}\" >> /tmp/CheckK8sStatus.log \n"
            - "    while [[ $k8s_state =~ 0 ]] \n"
            - '    do

              '
            - '        sleep 30

              '
            - '        k8s_state=`kubectl get pods --all-namespaces | awk ''{print$3}''
              |grep 0`

              '
            - "        echo \"${k8s_state}\" >> /tmp/CheckK8sStatus.log \n"
            - '    done

              '
            - "} \n"
            - '

              '
            - "CheckHelmStatus() { \n"
            - '    helm_state=`kubectl get pods --namespace cert-manager |awk ''{print$2}''|grep
              0`

              '
            - "    echo \"${helm_state}\" >> /tmp/CheckHelmStatus.log \n"
            - "    while [[ $helm_state =~ 0 ]] \n"
            - '    do

              '
            - '        sleep 30

              '
            - '        helm_state=`kubectl get pods --namespace cert-manager |awk
              ''{print$2}''|grep 0`

              '
            - "        echo \"${helm_state}\" >> /tmp/CheckHelmStatus.log \n"
            - '    done

              '
            - "} \n"
            - '

              '
            - "SetHelm() { \n"
            - "    su - rancher -c \"helm repo add rancher-stable http://rancher-mirror.oss-cn-beijing.aliyuncs.com/server-charts/stable\"\
              \ \n"
            - "    su - rancher -c \"kubectl create namespace cattle-system\" \n"
            - "    su - rancher -c \"kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.15.0/cert-manager.crds.yaml\"\
              \  \n"
            - "    su - rancher -c \"kubectl create namespace cert-manager\" \n"
            - "    su - rancher -c \"helm repo add jetstack https://charts.jetstack.io\"\
              \ \n"
            - "    su - rancher -c \"helm repo update\" \n"
            - "    su - rancher -c \"helm install cert-manager jetstack/cert-manager\
              \ --namespace cert-manager --version v0.15.0\" \n"
            - "} \n"
            - '

              '
            - "StartRancherCluster() { \n"
            - "    su - rancher -c \"helm install rancher rancher-stable/rancher --namespace\
              \ cattle-system  --set hostname=${RR}.${DomainName}\" \n"
            - "} \n"
            - '

              '
            - "CheckRancherStatus() { \n"
            - '    rancher_state=`kubectl get pods --all-namespaces | grep rancher
              | awk ''{print$3}'' | grep 0`

              '
            - "    echo \"${rancher_state}\" >> /tmp/CheckRancherStatus.log \n"
            - "    while [[ $rancher_state =~ 0 ]] \n"
            - '    do

              '
            - '        sleep 30

              '
            - '        rancher_state=`kubectl get pods --all-namespaces | grep rancher
              | awk ''{print$3}'' | grep 0`

              '
            - "        echo \"${rancher_state}\" >> /tmp/CheckRancherStatus.log \n"
            - '    done

              '
            - "} \n"
            - "main() { \n"
            - "    CreateUser \n"
            - "    InstallDocker  \n"
            - "    SetDockerRegistry \n"
            - "    InstallKubectl \n"
            - "    InstallRKE \n"
            - "    InstallHelm \n"
            - "    SetK8sConfig \n"
            - "    SSHConfig \n"
            - "    SetHostsConfig \n"
            - "    StartK8sCluster \n"
            - "    SetKubectlEnv \n"
            - "    CheckK8sStatus  \n"
            - "    SetHelm \n"
            - "    CheckHelmStatus \n"
            - "    StartRancherCluster \n"
            - "    CheckRancherStatus  \n"
            - "} \n"
            - "main \n"
            - "ros-notify \n"
    DependsOn: SlaveK8sServer
  MasterK8sWaitConditionHandle:
    Type: ALIYUN::ROS::WaitConditionHandle
    Properties: {}
  MasterK8sWaitCondition:
    Type: ALIYUN::ROS::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: MasterK8sWaitConditionHandle
      Timeout: 3600
  SlaveK8sWaitConditionHandle:
    Type: ALIYUN::ROS::WaitConditionHandle
    Properties: {}
  SlaveK8sWaitCondition:
    Type: ALIYUN::ROS::WaitCondition
    Properties:
      Count: 2
      Handle:
        Ref: SlaveK8sWaitConditionHandle
      Timeout: 3600
  SlbBackendServerAttachment:
    Type: ALIYUN::SLB::BackendServerAttachment
    Properties:
      BackendServerList:
        Fn::ListMerge:
        - Fn::GetAtt:
          - MasterK8sServer
          - InstanceIds
        - Fn::GetAtt:
          - SlaveK8sServer
          - InstanceIds
      BackendServerWeightList:
      - 100
      LoadBalancerId:
        Ref: SlbLoadBalancer
    DependsOn:
    - MasterK8sServer
    - SlaveK8sServer
  SlbListener443:
    Type: ALIYUN::SLB::Listener
    Properties:
      BackendServerPort: 443
      Bandwidth: -1
      HealthCheck:
        HealthyThreshold: 3
        HttpCode: http_2xx,http_3xx,http_4xx,http_5xx
        Interval: 2
        Timeout: 5
        UnhealthyThreshold: 3
      ListenerPort: 443
      LoadBalancerId:
        Ref: SlbLoadBalancer
      Protocol: tcp
      Scheduler: wrr
  SlbListener80:
    Type: ALIYUN::SLB::Listener
    Properties:
      BackendServerPort: 80
      Bandwidth: -1
      HealthCheck:
        HealthyThreshold: 3
        HttpCode: http_2xx,http_3xx,http_4xx,http_5xx
        Interval: 2
        Timeout: 5
        UnhealthyThreshold: 3
      ListenerPort: 80
      LoadBalancerId:
        Ref: SlbLoadBalancer
      Protocol: tcp
      Scheduler: wrr
Outputs:
  RancherServerWebUrl:
    Value:
      Fn::Sub:
      - http://${RR}.${DomainName}
      - DomainName:
          Ref: DomainName
        RR:
          Ref: RR
Metadata:
  ALIYUN::ROS::Interface:
    ParameterGroups:
    - Parameters:
      - VSwitchZoneId
      - VPC
      - VSwitch
      - SecurityGroup
      Label:
        default:
          en: Infrastructure Configuration
          zh-cn: 基础资源配置（必填）
    - Parameters:
      - InstanceType
      - SystemDiskCategory
      - SystemDiskSize
      - Password
      Label:
        default:
          en: Rancher Configuration
          zh-cn: Rancher 配置
    - Parameters:
      - LoadBalancerSpec
      - Bandwidth
      - DomainName
      - RR
      Label:
        default:
          en: SLB Configuration
          zh-cn: 负载均衡配置
    TemplateTags:
    - acs:solution:容器:Rancher集群版(已有VPC)
  ALIYUN::ROS::Composer:
    '23973475':
      Res:
        - SlbLoadBalancer
        - SlbBackendServerAttachment
        - SlbListener443
        - SlbListener80
      Parent: af5ebfb8
      Rect:
        - 40
        - 40
        - 267
        - 252
        - 5
        - 0
    f805db6e:
      Rect:
        - 639
        - 539
        - 40
        - 23
        - 1
        - 0
      ResT: Composer::ROSParameter::AlibabaCloud
    688186c2:
      Parent: f805db6e
      Rect:
        - 596
        - 483
        - 60
        - 63
        - 2
        - 0
      ResT: Composer::ROSParameter::Region
    12f22731:
      Res:
        - VpcEip
        - EIPAssociation
      Parent: 688186c2
      Rect:
        - 40
        - 40
        - 267
        - 103
        - 3
        - 0
    56d00a42:
      Res:
        - MasterK8sWaitConditionHandle
      Parent: 688186c2
      Rect:
        - 40
        - 40
        - 80
        - 490
        - 3
        - 0
      Hidden: true
    fd6c5660:
      Res:
        - MasterK8sWaitCondition
      Parent: 688186c2
      Rect:
        - 40
        - 40
        - 540
        - 200
        - 3
        - 0
      Hidden: true
    86526d03:
      Res:
        - SlaveK8sWaitConditionHandle
      Parent: 688186c2
      Rect:
        - 40
        - 40
        - 540
        - 490
        - 3
        - 0
      Hidden: true
    48b3e549:
      Res:
        - SlaveK8sWaitCondition
      Parent: 688186c2
      Rect:
        - 40
        - 40
        - 600
        - 200
        - 3
        - 0
      Hidden: true
    996a86e1:
      Res:
        - VPC
      Parent: 688186c2
      Rect:
        - 440
        - 298
        - 80
        - 172
        - 3
        - 0
      ResT: ALIYUN::ECS::VPC
    af5ebfb8:
      Res:
        - VSwitch
      Parent: 996a86e1
      Rect:
        - 400
        - 238
        - 100
        - 212
        - 4
        - 0
      ResT: ALIYUN::ECS::VSwitch
    d8457d65:
      Res:
        - SlaveK8sServer
      Parent: af5ebfb8
      Rect:
        - 40
        - 40
        - 169
        - 368
        - 5
        - 0
    6b0157db:
      Res:
        - MasterK8sServer
      Parent: af5ebfb8
      Rect:
        - 40
        - 40
        - 360
        - 368
        - 5
        - 0
    f98f1b2d:
      Parent: 688186c2
      Edge:
        - 12f22731
        - '23973475'
      Line: 0:0:0:gray:0
    040d5108:
      Parent: af5ebfb8
      Edge:
        - '23973475'
        - 6b0157db
      Line: 0:0:0:gray:0
    9cf61054:
      Parent: af5ebfb8
      Edge:
        - '23973475'
        - d8457d65
      Line: 0:0:0:gray:0
    25b699ec:
      Parent: af5ebfb8
      Edge:
        - 6b0157db
        - d8457d65
      Line: 0:0:0:gray:0
    2cb90658:
      Edge:
        - fd6c5660
        - 56d00a42
      Line: 0:0:0:gray:0
    412b2761:
      Edge:
        - 48b3e549
        - 86526d03
      Line: 0:0:0:gray:0
