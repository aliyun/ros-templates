ROSTemplateFormatVersion: '2015-09-01'
Description:
  zh-cn: 创建函数计算服务与函数，实现自定义资源处理逻辑，用于计算X+Y并在特定请求类型下返回结果。
  en: Create Function Compute service and functions to implement custom resource processing
    logic, designed for computing X+Y and returning the result under specific request
    types.
Parameters:
  ServiceName:
    Type: String
    Default: mytest
  FunctionName:
    Type: String
    Default: mytest
  Timeout:
    Type: Number
    Default: 60
  X:
    Type: Number
    Default: 1
  Y:
    Type: Number
    Default: 2
Resources:
  Service:
    Type: ALIYUN::FC::Service
    Properties:
      ServiceName:
        Ref: ServiceName
  Function:
    Type: ALIYUN::FC::Function
    Properties:
      ServiceName:
        Fn::GetAtt:
        - Service
        - ServiceName
      FunctionName:
        Ref: FunctionName
      Handler: index.handler
      Runtime: python3
      Code:
        SourceCode: "import time\nimport json\nimport urllib.request\nimport logging\n\
          \ndef handler(event, context):\n    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n\
          \    event = json.loads(event)\n    logger.info('receive request: %s', event)\n\
          \n    res_props = event['ResourceProperties']\n\n    result = {\n      \
          \  'RequestId': event['RequestId'],\n        'LogicalResourceId': event['LogicalResourceId'],\n\
          \        'StackId': event['StackId'],\n        'Status': 'SUCCESS',\n  \
          \      'PhysicalResourceId': 'MyCustomResourceId',\n        'Data': {}\n\
          \    }\n\n    if event['RequestType'] != 'Delete':\n        result['Data']['z']\
          \ = res_props['X'] + res_props['Y']\n\n    headers = {\n        'Content-type':\
          \ 'application/json',\n        'Accept': 'application/json',\n        'Date':\
          \ time.strftime('%a, %d %b %Y %X GMT', time.gmtime()),\n        'User-Agent':\
          \ 'MyCustomUserAgent'\n    }\n\n    req = urllib.request.Request(event['ResponseURL'],\
          \ data=json.dumps(result).encode('utf-8'), headers=headers)\n    resp =\
          \ urllib.request.urlopen(req)\n    resp_content = resp.read().decode('utf-8')\n\
          \    logger.info('response: %s', resp_content)\n\n    if resp.getcode()\
          \ != 200:\n        logger.error('Failed to send response, status code: %s',\
          \ resp.getcode())\n    else:\n        logger.info('Response sent successfully')\n"
  SimpleTest:
    Type: Custom::Add
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - Function
        - ARN
      Parameters:
        X:
          Ref: X
        Y:
          Ref: Y
      Timeout:
        Ref: Timeout
Outputs:
  SimpleTestOutputs:
    Value:
      Fn::GetAtt:
      - SimpleTest
      - Outputs
