ROSTemplateFormatVersion: '2015-09-01'
Description:
  zh-cn: 创建函数计算服务与函数，实现自定义资源处理逻辑，用于计算X+Y并在特定请求类型下返回结果。
  en: Create Function Compute service and functions to implement custom resource processing
    logic, designed for computing X+Y and returning the result under specific request
    types.
Parameters:
  ServiceName:
    Type: String
    Default: mytest
  FunctionName:
    Type: String
    Default: mytest
  Timeout:
    Type: Number
    Default: 60
  X:
    Type: Number
    Default: 1
  Y:
    Type: Number
    Default: 2
Resources:
  Service:
    Type: ALIYUN::FC::Service
    Properties:
      ServiceName:
        Ref: ServiceName
  Function:
    Type: ALIYUN::FC::Function
    Properties:
      ServiceName:
        Fn::GetAtt:
        - Service
        - ServiceName
      FunctionName:
        Ref: FunctionName
      Handler: index.handler
      Runtime: python3
      Code:
        SourceCode: |
          import time
          import json
          import urllib.request
          import logging
          
          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              event = json.loads(event)
              logger.info('receive request: %s', event)
          
              res_props = event['ResourceProperties']
          
              result = {
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'StackId': event['StackId'],
                  'Status': 'SUCCESS',
                  'PhysicalResourceId': 'MyCustomResourceId',
                  'Data': {}
              }
          
              if event['RequestType'] != 'Delete':
                  result['Data']['z'] = res_props['X'] + res_props['Y']
          
              headers = {
                  'Content-type': 'application/json',
                  'Accept': 'application/json',
                  'Date': time.strftime('%a, %d %b %Y %X GMT', time.gmtime()),
                  'User-Agent': 'MyCustomUserAgent'
              }
          
              req = urllib.request.Request(event['ResponseURL'], data=json.dumps(result).encode('utf-8'), headers=headers)
              resp = urllib.request.urlopen(req)
              resp_content = resp.read().decode('utf-8')
              logger.info('response: %s', resp_content)
          
              if resp.getcode() != 200:
                  logger.error('Failed to send response, status code: %s', resp.getcode())
              else:
                  logger.info('Response sent successfully')
  SimpleTest:
    Type: Custom::Add
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - Function
        - ARN
      Parameters:
        X:
          Ref: X
        Y:
          Ref: Y
      Timeout:
        Ref: Timeout
Outputs:
  SimpleTestOutputs:
    Value:
      Fn::GetAtt:
      - SimpleTest
      - Outputs
