ROSTemplateFormatVersion: '2015-09-01'
Description:
  zh-cn: 在现有VPC基础上，通过ROS模板部署Storm集群，包含管理节点ECS（绑定EIP）及使用弹性伸缩管理的节点，配置Java 1.8.0、Storm
    2.2.0、Zookeeper 3.6.2，安全组允许8081端口访问UI。
  en: On top of the existing VPC infrastructure, deploy a Storm cluster using an ROS
    template, comprising management nodes (ECS instances associated with EIPs) and
    worker nodes managed by Elastic Scaling. The configuration includes Java 1.8.0,
    Storm 2.2.0, and Zookeeper 3.6.2. The security group is set to permit access through
    port 8081 for the UI.
Parameters:
  VpcId:
    Type: String
    Label:
      en: Existing VPC Instance ID
      zh-cn: 现有VPC的实例ID
    Description:
      en: Please search the ID starting with (vpc-xxx)from console-Virtual Private
        Cloud
      zh-cn: 控制台-VPC-专有网络下查询
    AssociationProperty: ALIYUN::ECS::VPC::VPCId
  VSwitchZoneId:
    Type: String
    Label:
      en: VSwitch Zone ID
      zh-cn: 交换机可用区
    Description:
      en: New Switch Availability Zone ID
      zh-cn: 新建交换机Switch的可用区ID
    AssociationProperty: ALIYUN::ECS::Instance::ZoneId
  VSwitchId:
    Type: String
    Label:
      en: VSwitch ID
      zh-cn: 网络交换机ID
    Description:
      en: Please search the business VSwitch ID starting with(vsw-xxx)from console-Virtual
        Private Cloud-VSwitches
      zh-cn: 现有业务网络交换机的实例ID,控制台-VPC-专有网络-交换机下查询
    AssociationProperty: ALIYUN::ECS::VSwitch::VSwitchId
    AssociationPropertyMetadata:
      VpcId: VpcId
  SecurityGroupId:
    Type: String
    Label:
      en: Business Security Group ID
      zh-cn: 业务安全组ID
    Description:
      en: Please search the business security group ID starting with(sg-xxx)from console-ECS-Network
        & Security
      zh-cn: 现有业务安全组的实例ID,控制台-ECS-网络与安全-安全组下查询
    AssociationProperty: ALIYUN::ECS::SecurityGroup::SecurityGroupId
    AssociationPropertyMetadata:
      VpcId: VpcId
  InstanceType:
    Type: String
    Label:
      en: Instance Type
      zh-cn: 实例规格
    Description:
      en: <font color='blue'><b>1.Before selecting the model please confirm that the
        current available zone under the model is in stock, some models need to be
        reported in advance</b></font>]<br><font color='blue'><b>2.List of optional
        models</font>]<br></b></font>[ecs.c5.large <font color='green'>2vCPU 4GiB
        Intranet bandwidth1Gbps In-grid sending and receiving packages30MillionPPSS</font>]<br></b>[ecs.c5.xlarge
        <font color='green'>4vCPU 8GiB Intranet bandwidth1.5Gbps In-grid sending and
        receiving packages50MillionPPS</font>]<br></b>[ecs.c5.2xlarge <font color='green'>8vCPU
        16GiB Intranet bandwidth2.5Gbps In-grid sending and receiving packages80MillionPPS</font>]
      zh-cn: <font color='blue'><b>1.选择机型前请先确认当前可用区下该机型是否有货，部分机型需要提前报备</b></font><br><font
        color='blue'><b>2.可选机型列表</font><br></b></font>[ecs.c5.large <font color='green'>2vCPU
        4GiB 内网带宽1Gbps 内网收发包30万PPS</font>]<br></b>[ecs.c5.xlarge <font color='green'>4vCPU
        8GiB 内网带宽1.5Gbps 内网收发包50万PPS</font>]<br></b>[ecs.c5.2xlarge <font color='green'>8vCPU
        16GiB 内网带宽2.5Gbps 内网收发包80万PPS</font>]
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    AssociationPropertyMetadata:
      ZoneId: VSwitchZoneId
  InstancePassword:
    Type: String
    Label:
      en: Instance Password
      zh-cn: 实例密码
    Description:
      en: Server login password, Length 8-30, must contain three(Capital letters,
        lowercase letters, numbers, ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol
        in)
      zh-cn: 服务器登录密码,长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）
    ConstraintDescription:
      en: Length 8-30, must contain three(Capital letters, lowercase letters, numbers,
        ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol in).
      zh-cn: 长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）。
    AssociationProperty: ALIYUN::ECS::Instance::Password
  BindWidth:
    Type: Number
    Label:
      en: Public IP Bandwidth
      zh-cn: 公网IP带宽值
    Description:
      en: 'Public network IP bandwidth，unit: Mbps'
      zh-cn: 公网IP带宽值，单位：Mbps
    Default: 5
    MinValue: 1
    MaxValue: 100
  DiskCategory:
    Type: String
    Label:
      en: Disk Type
      zh-cn: 磁盘类型
    Description:
      en: '<font color=''blue''><b>Optional values:</b></font><br>[cloud_efficiency:
        <font color=''green''>Efficient Cloud Disk</font>]<br>[cloud_ssd: <font color=''green''>SSD
        Cloud Disk</font>]'
      zh-cn: '<font color=''blue''><b>可选值：</b></font><br>[cloud_efficiency: <font
        color=''green''>高效云盘</font>]<br>[cloud_ssd: <font color=''green''>SSD云盘</font>]'
    Default: cloud_efficiency
    AllowedValues:
    - cloud_efficiency
    - cloud_ssd
  DiskSize:
    Type: Number
    Label:
      en: System Disk Space
      zh-cn: 系统盘空间
    Description:
      en: 'The size of the instance system disk, in GiB. Value range: 20~32768'
      zh-cn: 实例系统盘大小，单位为GiB。取值范围：20~32768
    Default: 40
    MinValue: 20
    MaxValue: 2048
  Amount:
    Type: Number
    Label:
      en: Instance Amount
      zh-cn: 实例数量
    Description:
      en: 'ECS Instance Amount, Allowed value: 3~10'
      zh-cn: 购买实例数量，允许值：3~10
    Default: 3
    MinValue: 3
    MaxValue: 10
  InstanceImageId:
    Type: String
    Label:
      en: Image ID
      zh-cn: 镜像ID
    Description:
      en: Image ID，See detail：<b><a href='https://www.alibabacloud.com/help/doc-detail/112977.html'
        target='_blank'><font color='blue'>Find the mirror</font></a></b>
      zh-cn: 镜像ID, 详见：<b><a href='https://help.aliyun.com/document_detail/112977.html'
        target='_blank'><font color='blue'>查找镜像</font></a></b>
    Default: centos_7
Resources:
  RamRole:
    Type: ALIYUN::RAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - oos.aliyuncs.com
        Version: '1'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:*
            Effect: Allow
            Resource:
            - '*'
          - Action:
            - vpc:DescribeVpcs
            - vpc:DescribeVSwitches
            Effect: Allow
            Resource:
            - '*'
          - Action:
            - ess:CompleteLifecycleAction
            Effect: Allow
            Resource:
            - '*'
          Version: '1'
        PolicyName:
          Fn::Join:
          - ''
          - - ros-StackId-
            - Ref: ALIYUN::StackId
      RoleName:
        Fn::Join:
        - ''
        - - ros-StackId-
          - Ref: ALIYUN::StackId
    Metadata:
      ALIYUN::ROS::Designer:
        id: c40eb24b-0042-4ad8-b85c-b6155fa52238
  OOSTemplateIn:
    Type: ALIYUN::OOS::Template
    Properties:
      Content:
        Fn::Join:
        - ''
        - - '{"FormatVersion": "OOS-2019-06-01","Parameters": {"regionId": {"Type":
            "String","Default": "'
          - Ref: ALIYUN::Region
          - '"},"instanceIds": {"Type": "List","Default": ["${instanceId}"]},"lifecycleHookId":
            {"Type": "String","Default": "${lifecycleHookId}"},"lifecycleActionToken":
            {"Type": "String","Default": "${lifecycleActionToken}"}},"RamRole": "'
          - Fn::GetAtt:
            - RamRole
            - RoleName
          - '","Tasks": [{"Name": "runCommand","Action": "ACS::ECS::RunCommand","OnError":
            "CompleteLifecycleActionForAbandon","OnSuccess": "CompleteLifecycleActionForContinue","Properties":
            {"regionId": "{{ regionId }}","commandContent": "'
          - 'cd /software && bash rm_node.sh '
          - Ref: Amount
          - ' && sleep 20'
          - '","instanceId": "{{ ACS::TaskLoopItem }}","commandType": "RunShellScript"},
            "Loop": {"RateControl": {"Mode":"Concurrency","MaxErrors":0,"Concurrency":10},"Items":
            "{{ instanceIds }}","Outputs": {"commandOutputs": {"AggregateType": "Fn::ListJoin","AggregateField":
            "commandOutput"}}},"Outputs": {"commandOutput": {"Type": "String","ValueSelector":
            "invocationOutput"}}}, {"Name": "CompleteLifecycleActionForContinue","Action":
            "ACS::ExecuteAPI","OnSuccess": "ACS::END","Properties": {"Service": "ESS","API":
            "CompleteLifecycleAction","Parameters": {"RegionId": "{{ regionId }}","LifecycleHookId":
            "{{ lifecycleHookId }}","LifecycleActionToken": "{{ lifecycleActionToken
            }}"}}}, {"Name": "CompleteLifecycleActionForAbandon","Action": "ACS::ExecuteAPI","Properties":
            {"Service": "ESS","API": "CompleteLifecycleAction","Parameters": {"RegionId":
            "{{ regionId }}","LifecycleHookId": "{{ lifecycleHookId }}","LifecycleActionToken":
            "{{ lifecycleActionToken }}","LifecycleActionResult": "ABANDON"}}}]}'
      TemplateName:
        Fn::Join:
        - ''
        - - ros-StackId-
          - Ref: ALIYUN::StackId
          - -In
    DependsOn:
    - RamRole
    Metadata:
      ALIYUN::ROS::Designer:
        id: f38f57e5-4fad-404f-9550-45331dca1d60
  EcsInstanceGroupMaster:
    Type: ALIYUN::ECS::InstanceGroup
    Properties:
      ZoneId:
        Ref: VSwitchZoneId
      VpcId:
        Ref: VpcId
      VSwitchId:
        Ref: VSwitchId
      SecurityGroupId:
        Ref: SecurityGroupId
      ImageId:
        Ref: InstanceImageId
      AllocatePublicIP: false
      HostName:
        Fn::Join:
        - ''
        - - Storm
          - -[0,3]
      InstanceChargeType: PostPaid
      InstanceName:
        Fn::Join:
        - ''
        - - Storm
          - -[0,3]
      InstanceType:
        Ref: InstanceType
      InternetMaxBandwidthIn:
        Ref: BindWidth
      InternetMaxBandwidthOut:
        Ref: BindWidth
      IoOptimized: optimized
      MaxAmount: 1
      Password:
        Ref: InstancePassword
      SystemDiskCategory:
        Ref: DiskCategory
      UserData:
        Fn::Replace:
        - ros-notify:
            Fn::GetAtt:
            - RosWaitConditionMasterHandle
            - CurlCli
        - Fn::Join:
          - ''
          - - "#!/bin/sh \n"
            - "set -e \n"
            - "sleep 10 \n"
            - PASSWORD="
            - Ref: InstancePassword
            - "\" \n"
            - ROS_NOTIFY="
            - Fn::GetAtt:
              - RosWaitConditionClusterHandle
              - CurlCli
            - "\" \n"
            - "ENV_DIR=\"/software\" \n"
            - "RESOURCE_DIR=\"${ENV_DIR}/resources\" \n"
            - "BASH_PATH=\"/etc/profile\" \n"
            - "OSS_NAME=\"ros-template-resources\" \n"
            - "OSS_REGION=\"cn-beijing\" \n"
            - "ENDPOINT=\".aliyuncs.com\" \n"
            - "OOS_JDK_FOLDER=\"JDK\" \n"
            - "JDK_RPM=\"jdk-8u251-linux-i586.rpm\" \n"
            - "ZOOKEEPER=\"apache-zookeeper-3.6.2-bin\" \n"
            - "ZOOKEEPER_GZ=\"${ZOOKEEPER}.tar.gz\" \n"
            - "STORM=\"apache-storm-2.2.0\" \n"
            - "STORM_GZ=\"${STORM}.tar.gz\" \n"
            - "CLUSTER_FILE=\"${ENV_DIR}/cluster.sh\" \n"
            - "SSH_SCRIPT_FILE=\"${ENV_DIR}/ssh.sh\" \n"
            - "HOST_IP=$(ifconfig eth0 | awk '/inet /{print $2}') \n"
            - "HOST_NAME=$(hostname) \n"
            - "PORT=8081 \n"
            - "RM_NODES=\"${ENV_DIR}/rm_nodes.ini\"  #TODO \n"
            - "NODES_INFO_FILE=\"${ENV_DIR}/nodes_info.ini\" \n"
            - "objectList=(\"${OOS_JDK_FOLDER}/${JDK_RPM}\" \"Zookeeper/${ZOOKEEPER_GZ}\"\
              \ \"Hadoop/${STORM_GZ}\") \n"
            - " \n"
            - "createDir() { \n"
            - "    dir=$1 \n"
            - "    if [ -d \"${dir}\" ]; then \n"
            - "        recordLog \"Create failed, dir-${dir} is existed\" \n"
            - "    else \n"
            - "        mkdir -p \"${dir}\" \n"
            - "        recordLog \"Create Dir-${dir} successful\" \n"
            - "    fi \n"
            - "} \n"
            - " \n"
            - "recordLog() { \n"
            - "    time=$(date \"+%Y-%m-%d %H:%M:%S\") \n"
            - "    echo \"$time --- $1\" >>\"${ENV_DIR}/userdata.log\" \n"
            - "} \n"
            - " \n"
            - "download() { \n"
            - "    objectName=$1 \n"
            - "    wget https://${OSS_NAME}.oss-${OSS_REGION}${ENDPOINT}/${objectName}\
              \ -P ${RESOURCE_DIR} \n"
            - "    recordLog \"Download ${objectName} successful\" \n"
            - "} \n"
            - " \n"
            - "downloadResources() { \n"
            - "    for object in ${objectList[@]}; do \n"
            - "        download ${object} \n"
            - "    done \n"
            - "    recordLog \"Download all resources successful\" \n"
            - "} \n"
            - " \n"
            - "installJavaAndConfig() { \n"
            - "    yum -y install glibc.i686 \n"
            - "    rpm -Uvh ${RESOURCE_DIR}/${JDK_RPM} \n"
            - "    # config \n"
            - "    export JAVA_HOME=$(find / -name jdk1.8.0_*) \n"
            - "    echo \"export JAVA_HOME=${JAVA_HOME}\" >>${BASH_PATH} \n"
            - "    echo \"export JRE_HOME=${JAVA_HOME}/jre\" >>${BASH_PATH} \n"
            - "    echo \"export CLASSPATH=.:${JAVA_HOME}/lib:${JAVA_HOME}/jre/lib\"\
              \ >>${BASH_PATH} \n"
            - "    echo \"export PATH=${JAVA_HOME}/bin:$PATH\" >>${BASH_PATH} \n"
            - "    source ${BASH_PATH} \n"
            - "} \n"
            - " \n"
            - "installAndConfigZookeeper() { \n"
            - "    # download \n"
            - "    tar -zxvf ${RESOURCE_DIR}/${ZOOKEEPER_GZ} -C ${ENV_DIR} && cd ${ENV_DIR}\
              \ && mv ${ZOOKEEPER} zookeeper \n"
            - "    #cp ${ENV_DIR}/zookeeper/conf/zoo_sample.cfg ${ENV_DIR}/zookeeper/conf/zoo.cfg\
              \ \n"
            - "    cp -R ${ENV_DIR}/zookeeper /usr/local/ \n"
            - "    ln -s /usr/local/zookeeper ${ENV_DIR}/zookeeper \n"
            - "    # config \n"
            - "    echo \"export ZOOKEEPER_HOME=/usr/local/zookeeper\" >>${BASH_PATH}\
              \ \n"
            - "    echo \"export PATH=$PATH:/usr/local/zookeeper/bin\" >>${BASH_PATH}\
              \ \n"
            - "    source ${BASH_PATH} \n"
            - "    createDir ${ENV_DIR}/zookeeperLogs \n"
            - "    createDir ${ENV_DIR}/zookeeperData \n"
            - '    cat >/usr/local/zookeeper/conf/zoo.cfg <<EOF

              '
            - "tickTime=2000 \n"
            - "initLimit=10 \n"
            - "syncLimit=5 \n"
            - "dataDir=${ENV_DIR}/zookeeperData \n"
            - "dataLogDir=${ENV_DIR}/zookeeperLogs \n"
            - "clientPort=2181 \n"
            - "maxClientCnxns=0 \n"
            - "minSessionTimeout=4000 \n"
            - "maxSessionTimeout=10000 \n"
            - 'EOF

              '
            - "    touch ${ENV_DIR}/zookeeperData/myid \n"
            - "    recordLog \"Install and config Zookeeper successful\" \n"
            - "} \n"
            - " \n"
            - "installDependsRpm() { \n"
            - "    yum install -y yum-plugin-downloadonly \n"
            - "    result=$(echo $(yum whatprovides libgcc_s.so.1) | grep -o \"libgcc-.*86\"\
              ) \n"
            - "    mkdir -p ${ENV_DIR}/resources \n"
            - "    yum install --downloadonly --downloaddir=${ENV_DIR}/resources ${result}\
              \ \n"
            - "    files=$(ls ${ENV_DIR}/resources) \n"
            - "    for filename in $files \n"
            - "    do \n"
            - "        if [[ ${filename} =~ ^libgcc.*\\.rpm ]]; then \n"
            - "            echo ${filename} \n"
            - "            rpm -Uvh --force --nodeps ${ENV_DIR}/resources/${filename}\
              \ \n"
            - "        fi \n"
            - "    done \n"
            - "    result=$(echo $(yum provides libstdc++.so.6) | grep -o \"libstdc.*86\"\
              ) \n"
            - "    mkdir -p ${ENV_DIR}/resources \n"
            - "    yum install --downloadonly --downloaddir=${ENV_DIR}/resources ${result}\
              \ \n"
            - "    files=$(ls ${ENV_DIR}/resources) \n"
            - "    for filename in $files \n"
            - "    do \n"
            - "        if [[ ${filename} =~ ^libstdc.*\\.rpm ]]; then \n"
            - "            echo ${filename} \n"
            - "            rpm -Uvh --force --nodeps ${ENV_DIR}/resources/${filename}\
              \ \n"
            - "        fi \n"
            - "    done \n"
            - "} \n"
            - " \n"
            - "installStorm() { \n"
            - "    installDependsRpm \n"
            - "    tar -zxvf ${RESOURCE_DIR}/${STORM_GZ} -C ${ENV_DIR} && rm -f ${RESOURCE_DIR}/${STORM_GZ}\
              \ && cd ${ENV_DIR} && mv ${STORM} storm \n"
            - "    cd ${ENV_DIR}/storm && mkdir data \n"
            - "    echo \"export STORM_HOME=${ENV_DIR}/storm\" >>${BASH_PATH} \n"
            - "    echo \"export PATH=${ENV_DIR}/storm/bin:$PATH\" >>${BASH_PATH}\
              \ \n"
            - "    source ${BASH_PATH} \n"
            - "    ## config \n"
            - "    cp ${ENV_DIR}/storm/conf/storm.yaml ${ENV_DIR}/storm/conf/storm.yaml.bak\
              \ \n"
            - '    cat >${ENV_DIR}/storm/conf/storm.yaml <<EOF

              '
            - "storm.zookeeper.servers: \n"
            - "nimbus.seeds: [\"HOST_NAME\"] \n"
            - "supervisor.slots.ports: \n"
            - "    - 6700 \n"
            - "storm.local.dir: \"/software/storm/data\" \n"
            - "ui.port: UI_PORT \n"
            - 'EOF

              '
            - "    sed -i \"s/HOST_NAME/${HOST_NAME}/g\" ${ENV_DIR}/storm/conf/storm.yaml\
              \ \n"
            - "    sed -i \"s/UI_PORT/${PORT}/g\" ${ENV_DIR}/storm/conf/storm.yaml\
              \ \n"
            - "} \n"
            - " \n"
            - "generateScript() { \n"
            - "    ssh-keygen -t rsa -P '' -f '/root/.ssh/id_rsa' \n"
            - "    yum -y install expect \n"
            - "    echo '#!/bin/bash' >${SSH_SCRIPT_FILE} \n"
            - "    echo 'name_or_ip=$1' >>${SSH_SCRIPT_FILE} \n"
            - "    echo 'authorized_key=$2' >>${SSH_SCRIPT_FILE} \n"
            - "    echo 'expect <<EOF' >>${SSH_SCRIPT_FILE} \n"
            - "    echo 'set timeout 150' >>${SSH_SCRIPT_FILE} \n"
            - "    echo \"spawn ssh root@\\${name_or_ip} echo \\\"\\${authorized_key}\\\
              \" >> /root/.ssh/authorized_keys\" >>${SSH_SCRIPT_FILE} \n"
            - "    echo 'expect {' >>${SSH_SCRIPT_FILE} \n"
            - "    echo \"  \\\"*yes/no*\\\" { send \\\"yes\\n\\\"; exp_continue }\"\
              \ >>${SSH_SCRIPT_FILE} \n"
            - "    echo \"  \\\"*password:\\\" { send \\\"${PASSWORD}\\n\\\" }\" >>${SSH_SCRIPT_FILE}\
              \ \n"
            - "    echo '}' >>${SSH_SCRIPT_FILE} \n"
            - "    echo 'expect eof' >>${SSH_SCRIPT_FILE} \n"
            - "    echo 'EOF' >>${SSH_SCRIPT_FILE} \n"
            - "    chmod +x ${SSH_SCRIPT_FILE} \n"
            - "    recordLog \"Generate ${SSH_SCRIPT_FILE} successful\" \n"
            - "    echo '#!/bin/bash' >\"${SSH_SCRIPT_FILE}.login\" \n"
            - "    echo 'host_ip=$1' >>\"${SSH_SCRIPT_FILE}.login\" \n"
            - "    echo 'expect <<EOF' >>\"${SSH_SCRIPT_FILE}.login\" \n"
            - "    echo 'set timeout 150' >>\"${SSH_SCRIPT_FILE}.login\" \n"
            - "    echo \"spawn ssh root@\\${host_ip} exit;\" >>\"${SSH_SCRIPT_FILE}.login\"\
              \ \n"
            - "    echo 'expect {' >>\"${SSH_SCRIPT_FILE}.login\" \n"
            - "    echo \"  \\\"*yes/no*\\\" { send \\\"yes\\n\\\" }\" >>\"${SSH_SCRIPT_FILE}.login\"\
              \ \n"
            - "    echo '}' >>\"${SSH_SCRIPT_FILE}.login\" \n"
            - "    echo 'expect eof' >>\"${SSH_SCRIPT_FILE}.login\" \n"
            - "    echo 'EOF' >>\"${SSH_SCRIPT_FILE}.login\" \n"
            - "    chmod +x \"${SSH_SCRIPT_FILE}.login\" \n"
            - "    recordLog \"Generate ${SSH_SCRIPT_FILE}.login successful\" \n"
            - "} \n"
            - " \n"
            - "configLocalSSH() { \n"
            - "    generateScript \n"
            - "    authorized_key=$(cat /root/.ssh/id_rsa.pub) \n"
            - "    bash ${SSH_SCRIPT_FILE} \"${HOST_IP}\" \"${authorized_key}\" \n"
            - "    bash \"${SSH_SCRIPT_FILE}.login\" \"0.0.0.0\" \n"
            - "    bash \"${SSH_SCRIPT_FILE}.login\" \"localhost\" \n"
            - "    sed -i \"s/${HOST_IP}/${HOST_NAME},${HOST_IP}/\" \"/root/.ssh/known_hosts\"\
              \ \n"
            - "    recordLog \"Config expect-localhost successful\" \n"
            - "} \n"
            - " \n"
            - "generateClusterScript() { \n"
            - '    cat >${CLUSTER_FILE} <<EOF

              '
            - "#!/bin/sh \n"
            - "NODE_COUNT=\\$1 \n"
            - "HOSTS_PATH=\"/etc/hosts\" \n"
            - "ENV_DIR=\"/software\" \n"
            - "SSH_SCRIPT_FILE=\"\\${ENV_DIR}/ssh.sh\" \n"
            - "NODES_COUNT_FILE=\"\\${ENV_DIR}/nodes_count.ini\" \n"
            - "HOST_IP=\\$(ifconfig eth0 | awk '/inet /{print \\$2}') \n"
            - "HOST_NAME=\\$(hostname) \n"
            - "NODES_INFO_FILE=\"\\${ENV_DIR}/nodes_info.ini\" \n"
            - "RM_NODES=\"\\${ENV_DIR}/rm_nodes.ini\" \n"
            - " \n"
            - " \n"
            - "configCluster() { \n"
            - "    if [ ! -f \\${NODES_COUNT_FILE} ]; then \n"
            - "        rm -f \\${HOSTS_PATH} \n"
            - "        cp /usr/local/zookeeper/conf/zoo.cfg /usr/local/zookeeper/conf/zoo.cfg.bak\
              \ \n"
            - "        cp \\${ENV_DIR}/storm/conf/storm.yaml \\${ENV_DIR}/storm/conf/storm.yaml.bak\
              \ \n"
            - "        nodes_info=\\$(cat \\${NODES_INFO_FILE}) \n"
            - "        count=0 \n"
            - "        slotNum=6700 \n"
            - "        for node_info in \\${nodes_info[@]}; do \n"
            - "            let count++ \n"
            - "            let slotNum++ \n"
            - "            new_node_info=(\\${node_info//:/ }) \n"
            - "            node_ip=\\${new_node_info[0]} \n"
            - "            node_hostname=\\${new_node_info[1]} \n"
            - "            echo \"\\${node_ip} \\${node_hostname}\" >>\\${HOSTS_PATH}\
              \ \n"
            - "            echo \"server.\\${count}=\\${node_ip}:2888:3888\" >>\"\
              /usr/local/zookeeper/conf/zoo.cfg\" \n"
            - "            sed -i \"/storm.zookeeper.servers:/a \\    - \\\"\\${node_hostname}\\\
              \"\" \"\\${ENV_DIR}/storm/conf/storm.yaml\" \n"
            - "            sed -i \"/supervisor.slots.ports:/a \\    - \\${slotNum}\"\
              \ \"\\${ENV_DIR}/storm/conf/storm.yaml\" \n"
            - "            if [[ \"\\${HOST_IP}\" == \"\\${node_ip}\" ]]; then \n"
            - "                continue \n"
            - "            else \n"
            - "                sed -i \"s/nimbus.seeds: \\[/&\\\"\\${node_hostname}\\\
              \", /\" \"\\${ENV_DIR}/storm/conf/storm.yaml\" \n"
            - "            fi \n"
            - "            authorized_key=\\$(cat /root/.ssh/id_rsa.pub) \n"
            - "            bash \\${SSH_SCRIPT_FILE} \"\\${node_hostname}\" \"\\${authorized_key}\"\
              \ \n"
            - "        done \n"
            - "        echo \\${slotNum} > \\${ENV_DIR}/slotsNum.txt \n"
            - "        cp -rf \\${ENV_DIR}/storm \\${ENV_DIR}/storm.bak \n"
            - "        count=0 \n"
            - "        for node_info in \\${nodes_info[@]}; do \n"
            - "            let count++ \n"
            - "            new_node_info=(\\${node_info//:/ }) \n"
            - "            node_ip=\\${new_node_info[0]} \n"
            - "            node_hostname=\\${new_node_info[1]} \n"
            - "            if [[ \"\\${HOST_IP}\" == \"\\${node_ip}\" ]]; then \n"
            - "                echo \\${count} > \\${ENV_DIR}/zookeeperData/myid \n"
            - "                continue \n"
            - "            fi \n"
            - "            scp -r \\${HOSTS_PATH} \\${node_hostname}:/etc \n"
            - "            scp -r \\${ENV_DIR}/storm.bak \\${node_hostname}:\\${ENV_DIR}/storm\
              \ \n"
            - "            scp -r /usr/local/zookeeper/conf/zoo.cfg \\${node_hostname}:/usr/local/zookeeper/conf\
              \ \n"
            - "            ssh root@\\${node_hostname} \"echo \\${count} > \\${ENV_DIR}/zookeeperData/myid;\
              \ exit;\" \n"
            - "        done \n"
            - "    else \n"
            - "        old_node_count=\\$(cat \\${NODES_COUNT_FILE}) \n"
            - "        if [ \\${NODE_COUNT} -gt \\${old_node_count} ]; then \n"
            - "            nodes_info=\\$(cat \\${NODES_INFO_FILE}) \n"
            - "            count=\\$(cat \\${NODES_COUNT_FILE}) \n"
            - "            slotNum=\\$(cat \\${ENV_DIR}/slotsNum.txt) \n"
            - "            for node_info in \\${nodes_info[@]}; do \n"
            - "                new_node_info=(\\${node_info//:/ }) \n"
            - "                node_ip=\\${new_node_info[0]} \n"
            - "                node_hostname=\\${new_node_info[1]} \n"
            - "                grep \"\\${node_hostname}\" \\${HOSTS_PATH} \n"
            - "                if [ \\$? -eq \"0\" ]; then \n"
            - "                    continue \n"
            - "                fi \n"
            - "                let count++ \n"
            - "                let slotNum++ \n"
            - "                echo \"server.\\${count}=\\${node_ip}:2888:3888\" >>\"\
              /usr/local/zookeeper/conf/zoo.cfg\" \n"
            - "                sed -i \"/storm.zookeeper.servers:/a \\    - \\\"\\\
              ${node_hostname}\\\"\" \"\\${ENV_DIR}/storm/conf/storm.yaml\" \n"
            - "                sed -i \"/storm.zookeeper.servers:/a \\    - \\\"\\\
              ${node_hostname}\\\"\" \"\\${ENV_DIR}/storm.bak/conf/storm.yaml\" \n"
            - "                sed -i \"/supervisor.slots.ports:/a \\    - \\${slotNum}\"\
              \ \"\\${ENV_DIR}/storm/conf/storm.yaml\" \n"
            - "                sed -i \"/supervisor.slots.ports:/a \\    - \\${slotNum}\"\
              \ \"\\${ENV_DIR}/storm.bak/conf/storm.yaml\" \n"
            - "                sed -i \"s/nimbus.seeds: \\[/&\\\"\\${node_hostname}\\\
              \", /\" \"\\${ENV_DIR}/storm/conf/storm.yaml\" \n"
            - "                sed -i \"s/nimbus.seeds: \\[/&\\\"\\${node_hostname}\\\
              \", /\" \"\\${ENV_DIR}/storm.bak/conf/storm.yaml\" \n"
            - "                echo \"\\${node_ip} \\${node_hostname}\" >>\\${HOSTS_PATH}\
              \ \n"
            - "                authorized_key=\\$(cat /root/.ssh/id_rsa.pub) \n"
            - "                bash \\${SSH_SCRIPT_FILE} \"\\${node_hostname}\" \"\
              \\${authorized_key}\" \n"
            - "                ssh root@\\${node_hostname} \"echo \\${count} > \\\
              ${ENV_DIR}/zookeeperData/myid; exit;\" \n"
            - "            done \n"
            - "            echo \\${slotNum} > \\${ENV_DIR}/slotsNum.txt \n"
            - "            count=0 \n"
            - "            for node_info in \\${nodes_info[@]}; do \n"
            - "                new_node_info=(\\${node_info//:/ }) \n"
            - "                node_ip=\\${new_node_info[0]} \n"
            - "                node_hostname=\\${new_node_info[1]} \n"
            - "                if [ \"\\${HOST_IP}\" == \"\\${node_ip}\" ]; then \n"
            - "                    continue \n"
            - "                fi \n"
            - "                scp -r \\${HOSTS_PATH} \\${node_hostname}:/etc \n"
            - "                scp -r \\${ENV_DIR}/storm.bak \\${node_hostname}:\\\
              ${ENV_DIR}/storm \n"
            - "                ssh root@\\${node_hostname} \"rm -f \\${ENV_DIR}/storm/conf/storm.yaml;\
              \ exit;\" \n"
            - "                scp -r \\${ENV_DIR}/storm/conf/storm.yaml \\${node_hostname}:\\\
              ${ENV_DIR}/storm/conf \n"
            - "                scp -r /usr/local/zookeeper/conf/zoo.cfg \\${node_hostname}:/usr/local/zookeeper/conf\
              \ \n"
            - "            done \n"
            - "        else \n"
            - "            slotNum=\\$(cat \\${ENV_DIR}/slotsNum.txt) \n"
            - "            rm_nodes_info=\\$(cat \\${RM_NODES}) \n"
            - "            for rm_node in \\${rm_nodes_info[@]}; do \n"
            - "                rm_node_info=(\\${rm_node//:/ }) \n"
            - "                node_ip=\\${rm_node_info[0]} \n"
            - "                node_hostname=\\${rm_node_info[1]} \n"
            - "                grep \"\\${node_hostname}\" \"\\${HOSTS_PATH}\" \n"
            - "                if [ \\$? -eq \"0\" ]; then \n"
            - "                    sed -i \"/\\${node_hostname}/d\" \\${HOSTS_PATH}\
              \ \n"
            - "                    sed -i \"/\\${node_ip}/d\" \"/usr/local/zookeeper/conf/zoo.cfg\"\
              \ \n"
            - "                    sed -i \"/\\${slotNum}/d\" \"\\${ENV_DIR}/storm/conf/storm.yaml\"\
              \ \n"
            - "                    sed -i \"/\\${slotNum}/d\" \"\\${ENV_DIR}/storm.bak/conf/storm.yaml\"\
              \ \n"
            - "                    sed -i \"/- \\\"\\${node_hostname}\\\"/d\" \"\\\
              ${ENV_DIR}/storm/conf/storm.yaml\" \n"
            - "                    sed -i \"/- \\\"\\${node_hostname}\\\"/d\" \"\\\
              ${ENV_DIR}/storm.bak/conf/storm.yaml\" \n"
            - "                    sed -i \"s/\\\"\\${node_hostname}\\\", //g\" \"\
              \\${ENV_DIR}/storm/conf/storm.yaml\" \n"
            - "                    sed -i \"s/\\\"\\${node_hostname}\\\", //g\" \"\
              \\${ENV_DIR}/storm.bak/conf/storm.yaml\" \n"
            - "                    let slotNum-- \n"
            - "                fi \n"
            - "            done \n"
            - "            echo \\${slotNum} > \\${ENV_DIR}/slotsNum.txt  \n"
            - "            nodes_info=\\$(cat \\${NODES_INFO_FILE}) \n"
            - "            rm -f /usr/local/zookeeper/conf/zoo.cfg  \n"
            - "            cp /usr/local/zookeeper/conf/zoo.cfg.bak  /usr/local/zookeeper/conf/zoo.cfg\
              \  \n"
            - "            count=0  \n"
            - "            for node_info in \\${nodes_info[@]}; do  \n"
            - "                new_node_info=(\\${node_info//:/ })  \n"
            - "                node_ip=\\${new_node_info[0]}  \n"
            - "                node_hostname=\\${new_node_info[1]}  \n"
            - "                let count++  \n"
            - "                echo \"server.\\${count}=\\${node_ip}:2888:3888\" >>\"\
              /usr/local/zookeeper/conf/zoo.cfg\"  \n"
            - "                if [ \"\\${node_ip}\" != \"\\${HOST_IP}\" ]; then \
              \ \n"
            - "                    ssh root@\\${node_hostname} \"rm -f  \\${ENV_DIR}/zookeeperData/myid;echo\
              \ \\${count} > \\${ENV_DIR}/zookeeperData/myid; exit;\"  \n"
            - "                fi  \n"
            - "            done  \n"
            - "            for node_info in \\${nodes_info[@]}; do \n"
            - "                new_node_info=(\\${node_info//:/ }) \n"
            - "                node_ip=\\${new_node_info[0]} \n"
            - "                node_hostname=\\${new_node_info[1]} \n"
            - "                if [ \"\\${node_ip}\" == \"\\${HOST_IP}\" ]; then \n"
            - "                    continue \n"
            - "                fi \n"
            - "                ssh root@\\${node_hostname} \"rm -f \\${HOSTS_PATH};\
              \ rm -f \\${ENV_DIR}/storm/conf/storm.yaml; rm -f /usr/local/zookeeper/conf/zoo.cfg;\
              \ exit;\" \n"
            - "                scp -r \\${HOSTS_PATH} \\${node_hostname}:/etc \n"
            - "                scp -r /usr/local/zookeeper/conf/zoo.cfg \\${node_hostname}:/usr/local/zookeeper/conf\
              \ \n"
            - "                scp -r \\${ENV_DIR}/storm/conf/storm.yaml \\${node_hostname}:${ENV_DIR}/storm/conf\
              \ \n"
            - "            done \n"
            - "            #rm -f \\${RM_NODES} && touch \\${RM_NODES} \n"
            - "        fi \n"
            - "    fi \n"
            - "} \n"
            - " \n"
            - "startCluster() { \n"
            - "    if [ -f \\${NODES_COUNT_FILE} ]; then \n"
            - "        old_node_count=\\$(cat \\${NODES_COUNT_FILE}) \n"
            - "        bash /usr/local/zookeeper/bin/zkServer.sh stop \n"
            - "        bash /usr/local/zookeeper/bin/zkServer.sh start \n"
            - "        nodes_info=\\$(cat \\${NODES_INFO_FILE}) \n"
            - "        for node_info in \\${nodes_info[@]}; do \n"
            - "            new_node_info=(\\${node_info//:/ }) \n"
            - "            node_ip=\\${new_node_info[0]} \n"
            - "            node_hostname=\\${new_node_info[1]} \n"
            - "            ssh root@\\${node_hostname} '/usr/local/zookeeper/bin/zkServer.sh\
              \ stop;/usr/local/zookeeper/bin/zkServer.sh start; exit;' \n"
            - "        done \n"
            - "        kill -9 \\$(ps -ef | grep daemon.ui | awk '{print \\$2}'|head\
              \ -n 1) \n"
            - "        kill -9 \\$(ps -ef | grep daemon.nimbus | awk '{print \\$2}'|head\
              \ -n 1) \n"
            - "        kill -9 \\$(ps -ef | grep daemon.supervisor | awk '{print \\\
              $2}'|head -n 1) \n"
            - "        sleep 5 \n"
            - "        bash \\${ENV_DIR}/storm/bin/storm nimbus >/dev/null & \n"
            - "        bash \\${ENV_DIR}/storm/bin/storm supervisor >/dev/null & \n"
            - "        bash \\${ENV_DIR}/storm/bin/storm ui >/dev/null & \n"
            - "        for node_info in \\${nodes_info[@]}; do \n"
            - "            new_node_info=(\\${node_info//:/ }) \n"
            - "            node_ip=\\${new_node_info[0]} \n"
            - "            node_hostname=\\${new_node_info[1]} \n"
            - "            if [ \"\\${HOST_IP}\" == \"\\${node_ip}\" ]; then \n"
            - "                continue \n"
            - "            fi \n"
            - "            ssh root@\\${node_hostname} 'kill -9 \\$(ps -ef | grep\
              \ daemon.supervisor | awk \"{print \\\\\\$2}\"|head -n 1)' \n"
            - "            ssh root@\\${node_hostname} 'bash /software/storm/bin/storm\
              \ supervisor >/dev/null &' \n"
            - "        done \n"
            - "    else \n"
            - "        bash /usr/local/zookeeper/bin/zkServer.sh start \n"
            - "        nodes_info=\\$(cat \\${NODES_INFO_FILE}) \n"
            - "        for node_info in \\${nodes_info[@]}; do \n"
            - "            new_node_info=(\\${node_info//:/ }) \n"
            - "            node_ip=\\${new_node_info[0]} \n"
            - "            node_hostname=\\${new_node_info[1]} \n"
            - "            if [[ \"\\${HOST_IP}\" == \"\\${node_ip}\" ]]; then \n"
            - "                continue \n"
            - "            fi \n"
            - "            ssh root@\\${node_hostname} \"/usr/local/zookeeper/bin/zkServer.sh\
              \ start; exit;\" \n"
            - "        done \n"
            - "        bash \\${ENV_DIR}/storm/bin/storm nimbus >/dev/null & \n"
            - "        bash \\${ENV_DIR}/storm/bin/storm supervisor >/dev/null & \n"
            - "        bash \\${ENV_DIR}/storm/bin/storm ui >/dev/null & \n"
            - "        for node_info in \\${nodes_info[@]}; do \n"
            - "            new_node_info=(\\${node_info//:/ }) \n"
            - "            node_ip=\\${new_node_info[0]} \n"
            - "            node_hostname=\\${new_node_info[1]} \n"
            - " \n"
            - "            if [[ \"\\${HOST_IP}\" == \"\\${node_ip}\" ]]; then \n"
            - "                continue \n"
            - "            fi \n"
            - "            ssh root@\\${node_hostname} 'bash /software/storm/bin/storm\
              \ supervisor >/dev/null &' \n"
            - "        done \n"
            - "    fi \n"
            - "    echo \\${NODE_COUNT} >\\${NODES_COUNT_FILE} \n"
            - "} \n"
            - " \n"
            - "main() { \n"
            - "    nodes_count=\\$(cat \\${NODES_INFO_FILE} | wc -l) \n"
            - "    nodes_info=\\$(cat \\${NODES_INFO_FILE}) \n"
            - "    if [[ \"\\${nodes_count}\" == \"\\${NODE_COUNT}\" ]]; then \n"
            - "        echo \"start cluster\" >>/software/userdata.log \n"
            - "        configCluster \n"
            - "        startCluster \n"
            - "        ${ROS_NOTIFY} \n"
            - "    fi \n"
            - "} \n"
            - " \n"
            - "main \n"
            - 'EOF

              '
            - "} \n"
            - " \n"
            - "main() { \n"
            - "    createDir ${ENV_DIR} \n"
            - "    downloadResources \n"
            - "    configLocalSSH \n"
            - "    installJavaAndConfig \n"
            - "    installAndConfigZookeeper \n"
            - "    installStorm \n"
            - "    generateClusterScript \n"
            - "    echo \"${HOST_IP}:${HOST_NAME}\" >> ${NODES_INFO_FILE} \n"
            - "    touch ${RM_NODES} \n"
            - "} \n"
            - " \n"
            - "main \n"
            - " \n"
            - "ros-notify \n"
    DependsOn:
    - OOSTemplateIn
    Metadata:
      ALIYUN::ROS::Designer:
        id: 4d17593b-029a-45bf-849a-38376b2ac955
  VpcEip:
    Type: ALIYUN::VPC::EIP
    Properties:
      Bandwidth:
        Ref: BindWidth
      InternetChargeType: PayByTraffic
    Metadata:
      ALIYUN::ROS::Designer:
        id: c97c38d5-253b-4d8d-89f0-1537687b31b8
  EipAssociation:
    Type: ALIYUN::VPC::EIPAssociation
    Properties:
      InstanceId:
        Fn::Select:
        - '0'
        - Fn::GetAtt:
          - EcsInstanceGroupMaster
          - InstanceIds
      AllocationId:
        Ref: VpcEip
    DependsOn:
    - VpcEip
    Metadata:
      ALIYUN::ROS::Designer:
        id: fabc6711-b5c0-4aef-a1fc-fae3761b74a8
  OOSTemplateOut:
    Type: ALIYUN::OOS::Template
    Properties:
      Content:
        Fn::Join:
        - ''
        - - "FormatVersion: OOS-2019-06-01\nParameters:\n  regionId:\n    Type: String\n\
            \    Default: "
          - Ref: ALIYUN::Region
          - "\n  instanceIds:\n    Type: List\n    Default:\n      - '${instanceId}'\n\
            \  lifecycleHookId:\n    Type: String\n    Default: '${lifecycleHookId}'\n\
            \  lifecycleActionToken:\n    Type: String\n    Default: '${lifecycleActionToken}'\n\
            RamRole: "
          - Fn::GetAtt:
            - RamRole
            - RoleName
          - "\nTasks:\n  - Name: runCommand\n    Action: 'ACS::ECS::RunCommand'\n\
            \    OnError: CompleteLifecycleActionForAbandon\n    OnSuccess: CompleteLifecycleActionForContinue\n\
            \    Properties:\n      regionId: '{{ regionId }}'\n      commandContent:\
            \ |- \n"
          - Fn::Replace:
            - ros-notify:
                Fn::GetAtt:
                - RosWaitConditionHandleEss
                - CurlCli
            - Fn::Join:
              - ''
              - - "        #!/bin/sh \n"
                - "        hostname=$(hostname) \n"
                - '        MASTER_IP='
                - Fn::Select:
                  - '0'
                  - Fn::GetAtt:
                    - EcsInstanceGroupMaster
                    - PrivateIps
                - '

                  '
                - '        PASSWORD='
                - Ref: InstancePassword
                - '

                  '
                - "        echo root:${PASSWORD} | chpasswd \n"
                - "        # open sshd PasswordAuthentication \n"
                - "        sed -i 's/PasswordAuthentication no/PasswordAuthentication\
                  \ yes/g' \"/etc/ssh/sshd_config\" \n"
                - "        service sshd restart \n"
                - '        NODE_COUNT='
                - Ref: Amount
                - '

                  '
                - '        MASTER_HOSTNAME='
                - Fn::Select:
                  - '0'
                  - Fn::GetAtt:
                    - EcsInstanceGroupMaster
                    - HostNames
                - '

                  '
                - "        set -e \n"
                - "        JDK_RPM=\"jdk-8u251-linux-i586.rpm\" \n"
                - "        ENV_DIR=\"/software\" \n"
                - "        BASH_PATH=\"/etc/profile\" \n"
                - "        RESOURCE_DIR=\"${ENV_DIR}/resources\" \n"
                - "        HOST_IP=$(ifconfig eth0 | awk '/inet /{print $2}') \n"
                - "        HOST_NAME=$(hostname) \n"
                - "        SSH_SCRIPT_FILE=\"/root/ssh.sh\" \n"
                - "        NODES_INFO_FILE=\"${ENV_DIR}/nodes_info.ini\" \n"
                - "        NODES_COUNT_FILE=\"${ENV_DIR}/nodes_count.ini\" \n"
                - "        CLUSTER_FILE=\"${ENV_DIR}/cluster.sh\" \n"
                - "        RM_NODE_FILE=\"${ENV_DIR}/rm_node.sh\" \n"
                - "        ADD_NODE_FILE=\"${ENV_DIR}/add_node.sh\" \n"
                - "        RM_NODES=\"${ENV_DIR}/rm_nodes.ini\" \n"
                - "        ZOOKEEPER=\"apache-zookeeper-3.6.2-bin\" \n"
                - "        ZOOKEEPER_GZ=\"${ZOOKEEPER}.tar.gz\" \n"
                - "         \n"
                - "        recordLog() { \n"
                - "            time=$(date \"+%Y-%m-%d %H:%M:%S\") \n"
                - "            if [ ! -d ${ENV_DIR} ]; then \n"
                - "                mkdir ${ENV_DIR} \n"
                - "            fi \n"
                - "            echo \"$time --- $1\" >>\"${ENV_DIR}/userdata.log\"\
                  \ \n"
                - "        } \n"
                - "         \n"
                - "        createDir() { \n"
                - "            dir=$1 \n"
                - "            if [ -d \"${dir}\" ]; then \n"
                - "                recordLog \"Create failed, dir-${dir} is existed\"\
                  \ \n"
                - "            else \n"
                - "                mkdir -p \"${dir}\" \n"
                - "                recordLog \"Create Dir-${dir} successful\" \n"
                - "            fi \n"
                - "        } \n"
                - "         \n"
                - "        generateScript() { \n"
                - "            ssh-keygen -t rsa -P '' -f '/root/.ssh/id_rsa' \n"
                - "            yum -y install expect \n"
                - "            echo '#!/bin/bash' >${SSH_SCRIPT_FILE} \n"
                - "            echo 'name_or_ip=$1' >>${SSH_SCRIPT_FILE} \n"
                - "            echo 'authorized_key=$2' >>${SSH_SCRIPT_FILE} \n"
                - "            echo 'expect <<EOF' >>${SSH_SCRIPT_FILE} \n"
                - "            echo 'set timeout 150' >>${SSH_SCRIPT_FILE} \n"
                - "            echo \"spawn ssh root@\\${name_or_ip} echo \\\"\\${authorized_key}\\\
                  \" >> /root/.ssh/authorized_keys\" >>${SSH_SCRIPT_FILE} \n"
                - "            echo 'expect {' >>${SSH_SCRIPT_FILE} \n"
                - "            echo \"  \\\"*yes/no*\\\" { send \\\"yes\\n\\\"; exp_continue\
                  \ }\" >>${SSH_SCRIPT_FILE} \n"
                - "            echo \"  \\\"*password:\\\" { send \\\"${PASSWORD}\\\
                  n\\\" }\" >>${SSH_SCRIPT_FILE} \n"
                - "            echo '}' >>${SSH_SCRIPT_FILE} \n"
                - "            echo 'expect eof' >>${SSH_SCRIPT_FILE} \n"
                - "            echo 'EOF' >>${SSH_SCRIPT_FILE} \n"
                - "            chmod +x ${SSH_SCRIPT_FILE} \n"
                - "            recordLog \"Generate ${SSH_SCRIPT_FILE} successful\"\
                  \ \n"
                - "            echo '#!/bin/bash' >\"${SSH_SCRIPT_FILE}.login\" \n"
                - "            echo 'host_ip=$1' >>\"${SSH_SCRIPT_FILE}.login\" \n"
                - "            echo 'expect <<EOF' >>\"${SSH_SCRIPT_FILE}.login\"\
                  \ \n"
                - "            echo 'set timeout 150' >>\"${SSH_SCRIPT_FILE}.login\"\
                  \ \n"
                - "            echo \"spawn ssh root@\\${host_ip} exit;\" >>\"${SSH_SCRIPT_FILE}.login\"\
                  \ \n"
                - "            echo 'expect {' >>\"${SSH_SCRIPT_FILE}.login\" \n"
                - "            echo \"  \\\"*yes/no*\\\" { send \\\"yes\\n\\\" }\"\
                  \ >>\"${SSH_SCRIPT_FILE}.login\" \n"
                - "            echo '}' >>\"${SSH_SCRIPT_FILE}.login\" \n"
                - "            echo 'expect eof' >>\"${SSH_SCRIPT_FILE}.login\" \n"
                - "            echo 'EOF' >>\"${SSH_SCRIPT_FILE}.login\" \n"
                - "            chmod +x \"${SSH_SCRIPT_FILE}.login\" \n"
                - "            recordLog \"Generate ${SSH_SCRIPT_FILE}.login successful\"\
                  \ \n"
                - "        } \n"
                - "         \n"
                - "        configLocalSSH() { \n"
                - "            authorized_key=$(cat /root/.ssh/id_rsa.pub) \n"
                - "            bash ${SSH_SCRIPT_FILE} \"${MASTER_IP}\" \"${authorized_key}\"\
                  \ \n"
                - "            bash ${SSH_SCRIPT_FILE} \"${HOST_IP}\" \"${authorized_key}\"\
                  \ \n"
                - "            bash \"${SSH_SCRIPT_FILE}.login\" \"0.0.0.0\" \n"
                - "            bash \"${SSH_SCRIPT_FILE}.login\" \"localhost\" \n"
                - "            sed -i \"s/${MASTER_IP}/${MASTER_HOSTNAME},${MASTER_IP}/\"\
                  \ \"/root/.ssh/known_hosts\" \n"
                - "            recordLog \"Config expect-localhost successful\" \n"
                - "        } \n"
                - "         \n"
                - "         installJavaAndConfig() { \n"
                - "             mkdir -p ${RESOURCE_DIR} \n"
                - "             scp -r root@${MASTER_IP}:${RESOURCE_DIR}/* ${RESOURCE_DIR}\
                  \ \n"
                - "             yum -y install glibc.i686 \n"
                - "             sleep 5 \n"
                - "             rpm -Uvh ${RESOURCE_DIR}/${JDK_RPM} \n"
                - "             # config \n"
                - "             JAVA_HOME=$(find / -name jdk1.8.0_*) \n"
                - "             echo \"export JAVA_HOME=${JAVA_HOME}\" >>${BASH_PATH}\
                  \ \n"
                - "             echo \"export JRE_HOME=${JAVA_HOME}/jre\" >>${BASH_PATH}\
                  \ \n"
                - "             echo \"export CLASSPATH=.:${JAVA_HOME}/lib:${JAVA_HOME}/jre/lib\"\
                  \ >>${BASH_PATH} \n"
                - "             echo \"export PATH=${JAVA_HOME}/bin:$PATH\" >>${BASH_PATH}\
                  \ \n"
                - "             source ${BASH_PATH} \n"
                - "             rm -rf ${RESOURCE_DIR}/${JDK_RPM} \n"
                - "             recordLog \"Install and config java env successful\"\
                  \ \n"
                - "         } \n"
                - "         \n"
                - "        installAndConfigZookeeper() { \n"
                - "        #    scp root@${MASTER_IP}:${RESOURCE_DIR} ./ \n"
                - "            sleep 5 \n"
                - "            tar -zxvf ${RESOURCE_DIR}/${ZOOKEEPER_GZ} -C ${ENV_DIR}\
                  \ && cd ${ENV_DIR} && mv ${ZOOKEEPER} zookeeper \n"
                - "            #cp ${ENV_DIR}/zookeeper/conf/zoo_sample.cfg ${ENV_DIR}/zookeeper/conf/zoo.cfg\
                  \ \n"
                - "            cp -R ${ENV_DIR}/zookeeper /usr/local/ \n"
                - "            ln -s /usr/local/zookeeper ${ENV_DIR}/zookeeper \n"
                - "            # config \n"
                - "            echo \"export ZOOKEEPER_HOME=/usr/local/zookeeper\"\
                  \ >>${BASH_PATH} \n"
                - "            echo \"export PATH=$PATH:/usr/local/zookeeper/bin\"\
                  \ >>${BASH_PATH} \n"
                - "            source ${BASH_PATH} \n"
                - "            createDir ${ENV_DIR}/zookeeperLogs \n"
                - "            createDir ${ENV_DIR}/zookeeperData \n"
                - '            cat >/usr/local/zookeeper/conf/zoo.cfg <<EOF

                  '
                - "        tickTime=2000 \n"
                - "        initLimit=10 \n"
                - "        syncLimit=5 \n"
                - "        dataDir=${ENV_DIR}/zookeeperData \n"
                - "        dataLogDir=${ENV_DIR}/zookeeperLogs \n"
                - "        clientPort=2181 \n"
                - "        maxClientCnxns=0 \n"
                - "        minSessionTimeout=4000 \n"
                - "        maxSessionTimeout=10000 \n"
                - '        EOF

                  '
                - "            touch ${ENV_DIR}/zookeeperData/myid \n"
                - "            rm -rf ${RESOURCE_DIR}/${ZOOKEEPER_GZ} \n"
                - "            recordLog \"Install and config Zookeeper successful\"\
                  \ \n"
                - "        } \n"
                - "         \n"
                - "        installDependsRpm() { \n"
                - "            files=$(ls ${RESOURCE_DIR}) \n"
                - "            for filename in $files \n"
                - "            do \n"
                - "            if [[ ${filename} =~ ^libstdc.*\\.rpm ]]; then \n"
                - "                rpm -Uvh --force --nodeps ${ENV_DIR}/resources/${filename}\
                  \ \n"
                - "            elif [[ ${filename} =~ ^libgcc.*\\.rpm ]]; then \n"
                - "                rpm -Uvh --force --nodeps ${ENV_DIR}/resources/${filename}\
                  \ \n"
                - "            fi \n"
                - "            done \n"
                - "        } \n"
                - "         \n"
                - "        configStorm() { \n"
                - "            echo \"export STORM_HOME=${ENV_DIR}/storm\" >>${BASH_PATH}\
                  \ \n"
                - "            echo \"export PATH=${ENV_DIR}/storm/bin:$PATH\" >>${BASH_PATH}\
                  \ \n"
                - "            source ${BASH_PATH} \n"
                - "        } \n"
                - "         \n"
                - "        generateAddNodeScript() { \n"
                - "            echo '#!/bin/bash' >${ADD_NODE_FILE} \n"
                - "            echo 'NODE_COUNT=$1' >>${ADD_NODE_FILE} \n"
                - "            echo \"ssh root@${MASTER_IP} \\\"echo '${HOST_IP}:${HOST_NAME}'\
                  \ >> ${NODES_INFO_FILE};bash ${CLUSTER_FILE} \\${NODE_COUNT} >>\
                  \ ${ENV_DIR}/userdata.log\\\"\" >>${ADD_NODE_FILE} \n"
                - "            echo \"ros-notify\" >> ${ADD_NODE_FILE}  \n"
                - "        } \n"
                - "         \n"
                - "        generateRmNodeScript() { \n"
                - "            echo '#!/bin/bash' >${RM_NODE_FILE} \n"
                - "            echo 'NODE_COUNT=$1' >>${RM_NODE_FILE} \n"
                - "            echo \"ssh root@${MASTER_IP} \\\"sed -i '/${HOST_IP}:${HOST_NAME}/d'\
                  \ ${NODES_INFO_FILE};echo '${HOST_IP}:${HOST_NAME}' >> ${RM_NODES};bash\
                  \ ${CLUSTER_FILE} \\${NODE_COUNT}\\\"\" >>${RM_NODE_FILE} \n"
                - "        } \n"
                - "         \n"
                - "        main() { \n"
                - "            generateScript \n"
                - "            configLocalSSH \n"
                - "            installJavaAndConfig \n"
                - "            installAndConfigZookeeper \n"
                - "            installDependsRpm \n"
                - "            configStorm \n"
                - "            generateRmNodeScript \n"
                - "            generateAddNodeScript \n"
                - "            bash ${ADD_NODE_FILE} ${NODE_COUNT} \n"
                - "        } \n"
                - "         \n"
                - "        main \n"
          - |2-

                  instanceId: '{{ ACS::TaskLoopItem }}'
                  commandType: RunShellScript
                Loop:
                  RateControl:
                    Mode: Concurrency
                    MaxErrors: 0
                    Concurrency: 10
                  Items: '{{ instanceIds }}'
                  Outputs:
                    commandOutputs:
                      AggregateType: 'Fn::ListJoin'
                      AggregateField: commandOutput
                Outputs:
                  commandOutput:
                    Type: String
                    ValueSelector: invocationOutput
              - Name: CompleteLifecycleActionForContinue
                Action: 'ACS::ExecuteAPI'
                OnSuccess: 'ACS::END'
                Properties:
                  Service: ESS
                  API: CompleteLifecycleAction
                  Parameters:
                    RegionId: '{{ regionId }}'
                    LifecycleHookId: '{{ lifecycleHookId }}'
                    LifecycleActionToken: '{{ lifecycleActionToken }}'
              - Name: CompleteLifecycleActionForAbandon
                Action: 'ACS::ExecuteAPI'
                Properties:
                  Service: ESS
                  API: CompleteLifecycleAction
                  Parameters:
                    RegionId: '{{ regionId }}'
                    LifecycleHookId: '{{ lifecycleHookId }}'
                    LifecycleActionToken: '{{ lifecycleActionToken }}'
                    LifecycleActionResult: ABANDON
      TemplateName:
        Fn::Join:
        - ''
        - - ros-StackId-
          - Ref: ALIYUN::StackId
          - -Out
    DependsOn:
    - RamRole
    Metadata:
      ALIYUN::ROS::Designer:
        id: 67a74071-cd8a-4cf0-93bf-e4f05fbf4f7c
  RosWaitConditionMasterHandle:
    Type: ALIYUN::ROS::WaitConditionHandle
    Properties: {}
    Metadata:
      ALIYUN::ROS::Designer:
        id: 28c8b447-0074-4e1c-b16e-a23b999b1221
  RosWaitConditionMaster:
    Type: ALIYUN::ROS::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: RosWaitConditionMasterHandle
      Timeout: 1800
    Metadata:
      ALIYUN::ROS::Designer:
        id: d31fecba-ebcf-42a2-b524-af819d7cc0fd
  EssScalingGroupSlave:
    Type: ALIYUN::ESS::ScalingGroup
    Properties:
      VSwitchId:
        Ref: VSwitchId
      DefaultCooldown: 0
      DesiredCapacity:
        Fn::Calculate:
        - '{0}-1'
        - 0
        - - Ref: Amount
      HealthCheckType: ECS
      MaxSize:
        Ref: Amount
      MinSize: 2
      RemovalPolicys:
      - NewestInstance
      ScalingGroupName:
        Fn::Join:
        - '-'
        - - StackId
          - Ref: ALIYUN::StackId
    DependsOn:
    - EcsInstanceGroupMaster
    - OOSTemplateIn
    - OOSTemplateOut
    - RosWaitConditionMaster
    Metadata:
      ALIYUN::ROS::Designer:
        id: c5ebe395-2e00-4f5c-9656-4db3c6a06f6d
  EssLifecycleHookIn:
    Type: ALIYUN::ESS::LifecycleHook
    Properties:
      DefaultResult: CONTINUE
      HeartbeatTimeout: 600
      LifecycleTransition: SCALE_IN
      NotificationArn:
        Fn::Join:
        - ''
        - - 'acs:ess:'
          - Ref: ALIYUN::Region
          - ':'
          - Ref: ALIYUN::TenantId
          - :oos/
          - Fn::GetAtt:
            - OOSTemplateIn
            - TemplateName
      NotificationMetadata:
        Fn::Join:
        - ''
        - - '{"regionId": "${regionId}","instanceIds": "${instanceIds}","lifecycleHookId":
            "${lifecycleHookId}","lifecycleActionToken": "${lifecycleActionToken}"}'
      ScalingGroupId:
        Ref: EssScalingGroupSlave
    DependsOn:
    - EssScalingGroupSlave
    - OOSTemplateIn
    Metadata:
      ALIYUN::ROS::Designer:
        id: 3c848940-437b-4576-96e0-4514bedb2d90
  EssLifecycleHookOut:
    Type: ALIYUN::ESS::LifecycleHook
    Properties:
      DefaultResult: CONTINUE
      HeartbeatTimeout: 600
      LifecycleTransition: SCALE_OUT
      NotificationArn:
        Fn::Join:
        - ''
        - - 'acs:ess:'
          - Ref: ALIYUN::Region
          - ':'
          - Ref: ALIYUN::TenantId
          - :oos/
          - Fn::GetAtt:
            - OOSTemplateOut
            - TemplateName
      NotificationMetadata:
        Fn::Join:
        - ''
        - - '{"regionId": "${regionId}","instanceIds": "${instanceIds}","lifecycleHookId":
            "${lifecycleHookId}","lifecycleActionToken": "${lifecycleActionToken}"}'
      ScalingGroupId:
        Ref: EssScalingGroupSlave
    DependsOn:
    - EssScalingGroupSlave
    - OOSTemplateOut
    Metadata:
      ALIYUN::ROS::Designer:
        id: 6163867a-1838-4f86-bb06-ca736e88eb68
  EssScalingConfigurationSlave:
    Type: ALIYUN::ESS::ScalingConfiguration
    Properties:
      SecurityGroupId:
        Ref: SecurityGroupId
      ImageId: centos_7_06_64_20G_alibase_20190711.vhd
      InstanceName:
        Fn::Join:
        - '-'
        - - Storm-node
          - Ref: ALIYUN::StackId
      InstanceTypes:
      - Ref: InstanceType
      IoOptimized: optimized
      ScalingGroupId:
        Ref: EssScalingGroupSlave
      SystemDiskCategory:
        Ref: DiskCategory
      SystemDiskSize:
        Ref: DiskSize
    DependsOn:
    - EssScalingGroupSlave
    Metadata:
      ALIYUN::ROS::Designer:
        id: 440cd165-f824-4c69-8005-2ba8b4bfbe47
  EssScalingGroupEnable:
    Type: ALIYUN::ESS::ScalingGroupEnable
    Properties:
      ScalingConfigurationId:
        Ref: EssScalingConfigurationSlave
      ScalingGroupId:
        Ref: EssScalingGroupSlave
    DependsOn:
    - EcsInstanceGroupMaster
    - EssScalingConfigurationSlave
    - RosWaitConditionMaster
    Metadata:
      ALIYUN::ROS::Designer:
        id: 866c1f6a-2b7a-49c3-be21-17c039d49eb4
  RosWaitConditionClusterHandle:
    Type: ALIYUN::ROS::WaitConditionHandle
    Properties: {}
    Metadata:
      ALIYUN::ROS::Designer:
        id: 96189890-7475-4a66-956e-0a7bf79f1832
  RosWaitConditionCluster:
    Type: ALIYUN::ROS::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: RosWaitConditionClusterHandle
      Timeout: 1800
    Metadata:
      ALIYUN::ROS::Designer:
        id: ac2da7a5-324d-445d-b539-670f51aa4211
  RosWaitConditionHandleEss:
    Type: ALIYUN::ROS::WaitConditionHandle
    Properties: {}
    Metadata:
      ALIYUN::ROS::Designer:
        id: 7a568f88-588f-4635-b081-f327f41d685a
  RosWaitConditionEss:
    Type: ALIYUN::ROS::WaitCondition
    Properties:
      Count:
        Fn::Calculate:
        - '{0}-1'
        - 0
        - - Ref: Amount
      Handle:
        Ref: RosWaitConditionHandleEss
      Timeout: 1800
    Metadata:
      ALIYUN::ROS::Designer:
        id: aca6e39d-f458-420b-8506-9ca72010ea67
Outputs:
  EcsEip:
    Value:
      Fn::GetAtt:
      - VpcEip
      - EipAddress
  EcsInstanceIds:
    Value:
      Fn::GetAtt:
      - EcsInstanceGroupMaster
      - InstanceIds
  EssGroupId:
    Value:
      Fn::GetAtt:
      - EssScalingGroupSlave
      - ScalingGroupId
  MasterPrivateIp:
    Value:
      Fn::Select:
      - '0'
      - Fn::GetAtt:
        - EcsInstanceGroupMaster
        - PrivateIps
  StormUIUrl:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - VpcEip
          - EipAddress
        - :8081
Metadata:
  ALIYUN::ROS::Interface:
    ParameterGroups:
    - Parameters:
      - VpcId
      - VSwitchZoneId
      - VSwitchId
      - SecurityGroupId
      Label:
        default:
          en: Infrastructure Configuration
          zh-cn: 基础资源配置（必填）
    - Parameters:
      - InstanceType
      - InstancePassword
      - BindWidth
      - DiskCategory
      - DiskSize
      - Amount
      Label:
        default:
          en: Storm Configuration
          zh-cn: Storm 配置（必填）
    TemplateTags:
    - acs:solution:数据分析:Storm集群版(已有VPC)
  ALIYUN::ROS::Composer:
    '40089572':
      Res:
        - OOSTemplateIn
      Parent: 335228bc
      Rect:
        - 40
        - 40
        - 163
        - 225
        - 5
        - 0
    '73634334':
      Parent: eeb25b58
      Rect:
        - 729
        - 478
        - 60
        - 38
        - 2
        - 0
      ResT: Composer::ROSParameter::Region
    f8bed2da:
      Res:
        - VSwitchZoneId
      Parent: 520a67b7
      Rect:
        - 40
        - 40
        - 420
        - 265
        - -1
        - 0
      ResT: Composer::ROSParameter::Zone
    373e644b:
      Parent: '73634334'
      Edge:
        - 0f765f5b
        - 57adc123
      Line: 0:0:0:gray:0
    eeb25b58:
      Rect:
        - 776
        - 547
        - 40
        - -9
        - 1
        - 0
      ResT: Composer::ROSParameter::AlibabaCloud
    9b32dc80:
      Res:
        - VpcEip
        - EipAssociation
      Parent: '73634334'
      Rect:
        - 40
        - 40
        - 394
        - 71
        - 3
        - 0
    e1dc5832:
      Res:
        - RosWaitConditionMasterHandle
      Parent: '73634334'
      Rect:
        - 40
        - 40
        - 540
        - 385
        - 3
        - 0
    0f765f5b:
      Res:
        - RosWaitConditionCluster
      Parent: '73634334'
      Rect:
        - 40
        - 40
        - 630
        - 385
        - 3
        - 0
    5cb2466d:
      Res:
        - RosWaitConditionHandleEss
      Parent: '73634334'
      Rect:
        - 40
        - 40
        - 712
        - 385
        - 3
        - 0
    520a67b7:
      Res:
        - VpcId
      Parent: '73634334'
      Rect:
        - 439
        - 350
        - 80
        - 145
        - 3
        - 0
      ResT: ALIYUN::ECS::VPC
    636db7e7:
      Res:
        - RosWaitConditionMaster
      Parent: '73634334'
      Rect:
        - 40
        - 40
        - 540
        - 200
        - 3
        - 0
    57adc123:
      Res:
        - RosWaitConditionClusterHandle
      Parent: '73634334'
      Rect:
        - 40
        - 40
        - 630
        - 200
        - 3
        - 0
    cf02f5c5:
      Res:
        - RosWaitConditionEss
      Parent: '73634334'
      Rect:
        - 40
        - 40
        - 712
        - 200
        - 3
        - 0
    335228bc:
      Res:
        - VSwitchId
      Parent: 520a67b7
      Rect:
        - 400
        - 265
        - 100
        - 185
        - 4
        - 0
      ResT: ALIYUN::ECS::VSwitch
    88c5291d:
      Res:
        - OOSTemplateOut
      Parent: 335228bc
      Rect:
        - 40
        - 40
        - 294
        - 328
        - 5
        - 0
    590b5f82:
      Res:
        - RamRole
      Parent: 335228bc
      Rect:
        - 40
        - 40
        - 294
        - 225
        - 5
        - 0
    7303b736:
      Res:
        - EcsInstanceGroupMaster
      Parent: 335228bc
      Rect:
        - 40
        - 40
        - 394
        - 328
        - 5
        - 0
    7b150648:
      Parent: 335228bc
      Edge:
        - '40089572'
        - 590b5f82
      Line: 0:0:0:gray:0
    8b7a2489:
      Parent: '73634334'
      Edge:
        - 9b32dc80
        - 7303b736
      Line: 0:0:0:gray:0
    4250d21e:
      Parent: 335228bc
      Edge:
        - 88c5291d
        - 590b5f82
      Line: 0:0:0:gray:0
    8af3bffb:
      Parent: 335228bc
      Edge:
        - 88c5291d
        - 7303b736
      Line: 0:0:0:gray:0
    68d9191e:
      Parent: '73634334'
      Edge:
        - 636db7e7
        - e1dc5832
      Line: 0:0:0:gray:0
    32703d4b:
      Parent: 520a67b7
      Edge:
        - fd92d344
        - '40089572'
      Line: 0:0:0:gray:0
    379dad46:
      Parent: 520a67b7
      Edge:
        - fd92d344
        - 88c5291d
      Line: 0:0:0:gray:0
    da904a2c:
      Parent: '73634334'
      Edge:
        - cf02f5c5
        - 5cb2466d
      Line: 0:0:0:gray:0
    fd92d344:
      Res:
        - EssScalingGroupSlave
        - EssLifecycleHookIn
        - EssLifecycleHookOut
        - EssScalingConfigurationSlave
        - EssScalingGroupEnable
      Parent: 520a67b7
      Rect:
        - 84
        - 51
        - 141
        - 323
        - 17
        - 0

