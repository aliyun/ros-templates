ROSTemplateFormatVersion: '2015-09-01'
Description:
  zh-cn: 在ECS（CentOS 7）上自动部署Node.js环境，含VPC、安全组配置，安装Node.js，提供示例应用。
  en: Automatically deploy a Node.js environment on an ECS (CentOS 7) instance, including
    configuration of VPC (Virtual Private Cloud), Security Groups, installation of
    Node.js, and provision of a sample application.
Conditions:
  CreateInstance:
    Fn::Equals:
    - Ref: SelectInstance
    - false
Parameters:
  SelectInstance:
    Type: Boolean
    Label:
      en: Whether to select an existing instance
      zh-cn: 是否选择已有实例
    Default: true
  InstanceId:
    Type: String
    Label:
      en: ECS Instance ID
      zh-cn: ECS实例ID
    AssociationProperty: ALIYUN::ECS::Instance::InstanceId
    AssociationPropertyMetadata:
      Visible:
        Condition:
          Fn::Equals:
          - ${SelectInstance}
          - true
    Default: null
  ZoneId:
    Type: String
    Label:
      en: Zone ID
      zh-cn: 可用区ID
    Description:
      en: The available zone ID, you should confirm the zone support ECS、VPC、VSwitch
        or not.
      zh-cn: 可用区ID，需确认所选可用区下是否支持ECS、VPC、VSwitch等资源。
    AssociationProperty: ALIYUN::ECS::Instance::ZoneId
    AssociationPropertyMetadata:
      Visible:
        Condition:
          Fn::Equals:
          - ${SelectInstance}
          - false
    Default: null
  InstanceType:
    Type: String
    Label:
      en: Instance Type
      zh-cn: 实例类型
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    AssociationPropertyMetadata:
      ZoneId: ZoneId
      Visible:
        Condition:
          Fn::Equals:
          - ${SelectInstance}
          - false
    Default: null
  SystemDiskCategory:
    Type: String
    Label:
      en: System Disk Category
      zh-cn: 系统盘类型
    AssociationProperty: ALIYUN::ECS::Disk::SystemDiskCategory
    AssociationPropertyMetadata:
      ZoneId: ${ZoneId}
      InstanceType: ${InstanceType}
      Visible:
        Condition:
          Fn::Equals:
          - ${SelectInstance}
          - false
    Default: null
  Password:
    Type: String
    Label:
      en: Login Password
      zh-cn: 实例密码
    Description:
      en: 'The password must be 8 to 32 characters in length. <br>

        It must consist three of the the following character types: uppercase letters,
        lowercase letters, digits, and special characters. <br>

        Special characters include <span style="background:#E7E9EB;"><b>()`~!@#$%^&*_-+=|{}[]:;''<>,.?/</b></span>.<br>'
      zh-cn: 长度为8-30位，需包含大写字母、小写字母、特殊符号和数字中的三个，允许的特殊字符包括<span style="background:#E7E9EB;"><b>()`~!@#$%^&*_-+=|{}[]:;'<>,.?/</b></span>。
    AssociationPropertyMetadata:
      Visible:
        Condition:
          Fn::Equals:
          - ${SelectInstance}
          - false
    Default: null
    AllowedPattern: '[0-9A-Za-z\_\-&:;''<>,=%`~!@#\(\)\$\^\*\+\|\{\}\[\]\.\?\/]+$'
    MinLength: 8
    MaxLength: 30
    NoEcho: true
Resources:
  Vpc:
    Type: ALIYUN::ECS::VPC
    Condition: CreateInstance
    Properties:
      CidrBlock: 192.168.0.0/16
  SecurityGroup:
    Type: ALIYUN::ECS::SecurityGroup
    Condition: CreateInstance
    Properties:
      VpcId:
        Ref: Vpc
  VSwitch:
    Type: ALIYUN::ECS::VSwitch
    Condition: CreateInstance
    Properties:
      ZoneId:
        Ref: ZoneId
      VpcId:
        Ref: Vpc
      CidrBlock: 192.168.0.0/24
  InstanceGroup:
    Type: ALIYUN::ECS::InstanceGroup
    Condition: CreateInstance
    Properties:
      VpcId:
        Ref: Vpc
      VSwitchId:
        Ref: VSwitch
      SecurityGroupId:
        Ref: SecurityGroup
      ImageId: centos_7_8
      InstanceType:
        Ref: InstanceType
      SystemDiskCategory:
        Ref: SystemDiskCategory
      Password:
        Ref: Password
      IoOptimized: optimized
      MaxAmount: 1
  DS_Instances:
    Type: DATASOURCE::ECS::Instances
    Properties:
      InstanceIds:
        Fn::If:
        - CreateInstance
        - Fn::GetAtt:
          - InstanceGroup
          - InstanceIds
        - - Ref: InstanceId
  WaitConditionHandle:
    Type: ALIYUN::ROS::WaitConditionHandle
    Properties: {}
  WaitCondition:
    Type: ALIYUN::ROS::WaitCondition
    Properties:
      Handle:
        Ref: WaitConditionHandle
      Timeout: 3720
      Count: 1
  SecurityGroupIngress_22:
    Type: ALIYUN::ECS::SecurityGroupIngress
    Properties:
      SecurityGroupId:
        Fn::Jq:
        - First
        - .[0].SecurityGroupIds[0]
        - Fn::GetAtt:
          - DS_Instances
          - Instances
      SourceCidrIp: 0.0.0.0/0
      IpProtocol: tcp
      NicType: intranet
      PortRange: 22/22
  SecurityGroupIngress_3000:
    Type: ALIYUN::ECS::SecurityGroupIngress
    Properties:
      SecurityGroupId:
        Fn::Jq:
        - First
        - .[0].SecurityGroupIds[0]
        - Fn::GetAtt:
          - DS_Instances
          - Instances
      SourceCidrIp: 0.0.0.0/0
      IpProtocol: tcp
      NicType: intranet
      PortRange: 3000/3000
  InstallNodejs:
    Type: ALIYUN::ECS::RunCommand
    Properties:
      InstanceIds:
        Fn::If:
        - CreateInstance
        - Fn::GetAtt:
          - InstanceGroup
          - InstanceIds
        - - Ref: InstanceId
      Type: RunShellScript
      Sync: true
      Timeout: 3600
      CommandContent:
        Fn::Sub: "#!/bin/bash\nif [ ! -f .ros.provision ]; then\n  echo \"Name: 部署Node.js环境（CentOS\
          \ 7）\" > .ros.provision\nfi\n\nname=$(grep \"^Name:\" .ros.provision | awk\
          \ -F':' '{print $2}' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n\
          if [[ \"$name\" != \"部署Node.js环境（CentOS 7）\" ]]; then\n  echo \"当前实例已使用过\\\
          \"$name\\\"教程的一键配置，不能再使用本教程的一键配置\"\n  ${WaitConditionHandle.CurlCli} --data-binary\
          \ \"{\\\"status\\\": \\\"FAILURE\\\", \\\"reason\\\": \\\"The current instance\
          \ has already applied the configuration of the \\\\\\\"$name\\\\\\\" tutorial,\
          \ and the configuration of this tutorial can no longer be applied.\\\"}\"\
          \n  exit 0\nfi\n\nif ! grep -q \"^Step1: Install Node.js$\" .ros.provision;\
          \ then\n  echo \"#########################\"\n  echo \"# Install Node.js\"\
          \n  echo \"#########################\"\n  yum install git -y\n  curl -o\
          \ install.sh https://gitee.com/mirrors/nvm/raw/v0.39.3/install.sh\n  if\
          \ [ $? -ne 0 ]; then\n    ${WaitConditionHandle.CurlCli} --data-binary \"\
          {\\\"status\\\": \\\"FAILURE\\\", \\\"reason\\\": \\\"Download nvm install\
          \ script failed.\\\"}\"\n  fi\n  sed -i 's|GITHUB_REPO|GITEE_REPO|g' install.sh\n\
          \  sed -i 's|github.com|gitee.com|g' install.sh\n  sed -i 's|https://raw.githubusercontent.com/${!NVM_GITEE_REPO}/${!NVM_VERSION}|https://gitee.com/${!NVM_GITEE_REPO}/raw/${!NVM_VERSION}|g'\
          \ install.sh\n  NVM_INSTALL_GITEE_REPO=mirrors/nvm METHOD='script' bash\
          \ install.sh\n  if [ $? -ne 0 ]; then\n    ${WaitConditionHandle.CurlCli}\
          \ --data-binary \"{\\\"status\\\": \\\"FAILURE\\\", \\\"reason\\\": \\\"\
          Install nvm failed.\\\"}\"\n  fi\n  export NVM_DIR=\"$([ -z \"${!XDG_CONFIG_HOME-}\"\
          \ ] && printf %s \"${!HOME}/.nvm\" || printf %s \"${!XDG_CONFIG_HOME}/nvm\"\
          )\"\n  [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads\
          \ nvm\n  export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\n\
          \  nvm list-remote\n  nvm install v14.0.0\n  if [ $? -ne 0 ]; then\n   \
          \ ${WaitConditionHandle.CurlCli} --data-binary \"{\\\"status\\\": \\\"FAILURE\\\
          \", \\\"reason\\\": \\\"nvm install v14.0.0 failed.\\\"}\"\n  fi\n  nvm\
          \ install v16.0.0\n  if [ $? -ne 0 ]; then\n    ${WaitConditionHandle.CurlCli}\
          \ --data-binary \"{\\\"status\\\": \\\"FAILURE\\\", \\\"reason\\\": \\\"\
          nvm install v16.0.0 failed.\\\"}\"\n  fi\n  nvm ls\n  echo \"Step1: Install\
          \ Node.js\" >> .ros.provision\nelse\n  echo \"#########################\"\
          \n  echo \"# Node.js has been installed\"\n  echo \"#########################\"\
          \nfi\n\nif ! grep -q \"^Step2: Prepare example$\" .ros.provision; then\n\
          \  echo \"#########################\"\n  echo \"# Prepare example\"\n  echo\
          \ \"#########################\"\n  cd\n  cat > example.js << \\EOF\nconst\
          \ http = require('http');\nconst hostname = '0.0.0.0';\nconst port = 3000;\n\
          const server = http.createServer((req, res) => { \n    res.statusCode =\
          \ 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello\
          \ World\\n');\n}); \n\nserver.listen(port, hostname, () => { \n    console.log(`Server\
          \ running at http://${!hostname}:${!port}/`);\n});\nEOF\n  nohup node ~/example.js\
          \ > example.log 2>&1 &\n  echo \"Step2: Prepare example\" >> .ros.provision\n\
          else\n  echo \"#########################\"\n  echo \"# Example has been\
          \ ready\"\n  echo \"#########################\"\nfi\n\n${WaitConditionHandle.CurlCli}\
          \ --data-binary '{\"status\": \"SUCCESS\"}'"
    DependsOn:
    - SecurityGroupIngress_3000
Outputs:
  ExampleUrl:
    Description:
      en: The page of example.js.
      zh-cn: example.js页面。
    Value:
      Fn::Sub:
      - http://${IP}:3000
      - IP:
          Fn::Jq:
          - First
          - if .[0].PublicIpAddress != [] then .[0].PublicIpAddress[0] else .[0].EipAddress.IpAddress
            end
          - Fn::GetAtt:
            - DS_Instances
            - Instances
Metadata:
  ALIYUN::ROS::Interface:
    ParameterGroups:
    - Parameters:
      - SelectInstance
      - InstanceId
      - ZoneId
      - InstanceType
      - SystemDiskCategory
      - Password
      Label:
        default: ECS
    TemplateTags:
    - acs:document-help:ecs:部署Node.js环境（CentOS 7）
