ROSTemplateFormatVersion: '2015-09-01'
Description:
  zh-cn: 创建WordPress网站，含ECS、RDS实例，配置安全组、EIP，实现数据库上云及数据迁移，含全面环境准备与自动化部署脚本。
  en: Create a WordPress website, including ECS ​​and RDS instances, configure security groups and EIPs, implement database cloud migration and data migration, including comprehensive environment preparation and automated deployment scripts.
Parameters:
  ZoneId:
    Type: String
    Label:
      en: Primary VSwitch Availability Zone
      zh-cn: 主可用区
    Description:
      en: Availability Zone ID,<br><b>note： <font color='blue'>Before selecting, please
        confirm that the Availability Zone supports the specification of creating
        ECS resources.</font></b>
      zh-cn: 可用区ID。<br><b>注： <font color='blue'>选择可用区前请确认该可用区是否支持创建ECS资源的规格。</font></b>
    AssociationProperty: ALIYUN::ECS::Instance:ZoneId
  InstanceType:
    Type: String
    Label:
      en: Instance Type
      zh-cn: 实例类型
    Description:
      en: 'Fill in the specifications that can be used under the VSwitch availability
        zone;</b></font><br>general specifications：<font color=''red''><b>ecs.c5.large</b></font><br>note:
        a few zones do not support general specifications<br>see detail: <a href=''https://www.alibabacloud.com/help/en/doc-detail/25378.html''
        target=''_blank''><b><font color=''blue''>Instance Specification Family.</font></a></b>'
      zh-cn: 填写VSwitch可用区下可使用的规格；<br>通用规格：<font color='red'><b>ecs.c5.large</b></font><br>注：可用区可能不支持通用规格<br>规格详见：<a
        href='https://help.aliyun.com/document_detail/25378.html' target='_blank'><b><font
        color='blue'>实例规格族。</font></a></b>
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    AssociationPropertyMetadata:
      ZoneId: ${ZoneId}
    Default: ecs.c5.large
  SystemDiskCategory:
    Type: String
    Label:
      en: System Disk Type
      zh-cn: 系统盘类型
    Description:
      en: '<font color=''blue''><b>Optional values:</b></font><br>[cloud_efficiency:
        <font color=''green''>Efficient Cloud Disk</font>]<br>[cloud_ssd: <font color=''green''>SSD
        Cloud Disk</font>]<br>[cloud_essd: <font color=''green''>ESSD Cloud Disk</font>]<br>[cloud:
        <font color=''green''>Cloud Disk</font>]<br>[ephemeral_ssd: <font color=''green''>Local
        SSD Cloud Disk</font>]'
      zh-cn: '<font color=''blue''><b>可选值：</b></font><br>[cloud_efficiency: <font
        color=''green''>高效云盘</font>]<br>[cloud_ssd: <font color=''green''>SSD云盘</font>]<br>[cloud_essd:
        <font color=''green''>ESSD云盘</font>]<br>[cloud: <font color=''green''>普通云盘</font>]<br>[ephemeral_ssd:
        <font color=''green''>本地SSD盘</font>]'
    AssociationProperty: ALIYUN::ECS::Disk::SystemDiskCategory
    AssociationPropertyMetadata:
      LocaleKey: DiskCategory
      InstanceType: ${InstanceType}
      ZoneId: ${ZoneId}
    Default: cloud_efficiency
  InstancePassword:
    Type: String
    Label:
      en: Instance Password
      zh-cn: 实例密码
    Description:
      en: Server login password, Length 8-30, must contain three(Capital letters,
        lowercase letters, numbers, ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol
        in).
      zh-cn: 服务器登录密码,长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）。
    ConstraintDescription:
      en: Length 8-30, must contain three(Capital letters, lowercase letters, numbers,
        ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol in).
      zh-cn: 长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）。
    AllowedPattern: '[0-9A-Za-z\_\-\&:;''<>,=%`~!@#\(\)\$\^\*\+\|\{\}\[\]\.\?\/]+$'
    MinLength: 8
    MaxLength: 30
  DBName:
    Type: String
    Label:
      en: ECS self-created DB Name
      zh-cn: ECS自建数据库名
    Description:
      en: Name of WordPress database.
      zh-cn: WordPress数据库名。
    ConstraintDescription:
      en: Consist of 2 to 64 characters of lowercase letters, underline. Must begin
        with a letter and be end with an alphanumeric character.
      zh-cn: 由 2 到 64 个小写字母组成，下划线。必须以字母开头，以字母数字字符结尾。
    Default: wordpressdb
    MinLength: 2
    MaxLength: 64
  DBUser:
    Type: String
    Label:
      en: ECS self-created DB Username
      zh-cn: ECS自建数据库账号
    Description:
      en: Username of WordPress database.
      zh-cn: WordPress数据库账号。
    ConstraintDescription:
      en: Consist of 2 to 16 characters of lowercase letters, underline. Must begin
        with a letter and be end with an alphanumeric character.
      zh-cn: 由 2 到 16 个小写字母组成，下划线。必须以字母开头，以字母数字字符结尾。
    Default: wordpressuser
    MinLength: 2
    MaxLength: 16
  DBPassword:
    Type: String
    Label:
      en: ECS self-created DB Password
      zh-cn: ECS自建数据库密码
    Description:
      en: WordPress database password, consisting of letters, numbers, and underline(_),
        is 8 to 32 characters long.
      zh-cn: WordPress数据库密码，由字母、数字、下划线（_）组成，长度为8~32个字符。
    ConstraintDescription:
      en: Consisting of letters, numbers, and underline(_), is 8 to 32 characters
        long.
      zh-cn: 由字母、数字、下划线（_）组成，长度为8~32个字符。
    MinLength: 8
    MaxLength: 32
  DBInstanceClass:
    Type: String
    Label:
      en: Instance Class
      zh-cn: 实例规格
    AssociationProperty: ALIYUN::RDS::Instance::InstanceType
    AssociationPropertyMetadata:
      ZoneId: ${ZoneId}
      EngineVersion: '8.0'
      Engine: MySQL
      Category: HighAvailability
      DBInstanceStorageType: cloud_essd
    Default: rds.mysql.t1.small
  RDSDBUser:
    Type: String
    Label:
      en: RDS DB Username
      zh-cn: RDS数据库账号
    Description:
      en: Username of WordPress database.
      zh-cn: WordPress数据库账号。
    ConstraintDescription:
      en: Consist of 2 to 16 characters of lowercase letters, underline. Must begin
        with a letter and be end with an alphanumeric character.
      zh-cn: 由 2 到 16 个小写字母组成，下划线。必须以字母开头，以字母数字字符结尾。
    Default: dbuser
    MinLength: 2
    MaxLength: 16
  RDSDBPassword:
    Type: String
    Label:
      en: RDS DB Password
      zh-cn: RDS数据库密码
    Description:
      en: WordPress database password, consisting of letters, numbers, and underline(_),
        is 8 to 32 characters long,Must contain three different types of characters.
      zh-cn: WordPress数据库密码，由字母、数字、下划线（_）组成，长度为8~32个字符，必须包含3种不同类型的字符。
    ConstraintDescription:
      en: Consisting of letters, numbers, and underline(_), is 8 to 32 characters
        long.
      zh-cn: 由字母、数字、下划线（_）组成，长度为8~32个字符。
    MinLength: 8
    MaxLength: 32
  DtsMigrationJobClass:
    Type: String
    Label:
      en: Migration Instance Specification
      zh-cn: 迁移实例规格
    Description:
      en: Specifications of data migration channels;<br>see detail：<a href='https://www.alibabacloud.com/help/doc-detail/26606.html'
        target='_blank'><b><font color='blue'>Specifications.</font></b></a>
      zh-cn: 迁移实例规格；<br>规格详见：<a href='https://help.aliyun.com/document_detail/26606.html'
        target='_blank'><b><font color='blue'>规格说明。</font></b></a>
    Default: small
    AllowedValues:
    - small
    - medium
    - large
  DtsMigrationJobName:
    Type: String
    Label:
      en: Migration Task Name
      zh-cn: 迁移任务名称
    Description:
      en: Migration Task Name.
      zh-cn: 迁移任务名称。
    Default: testmigration
Resources:
  Vpc:
    Type: ALIYUN::ECS::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
  VSwitch:
    Type: ALIYUN::ECS::VSwitch
    Properties:
      ZoneId:
        Ref: ZoneId
      VpcId:
        Ref: Vpc
      CidrBlock: 192.168.0.0/24
  SecurityGroup:
    Type: ALIYUN::ECS::SecurityGroup
    Properties:
      VpcId:
        Ref: Vpc
  SecurityGroupIngress_22:
    Type: ALIYUN::ECS::SecurityGroupIngress
    Properties:
      SecurityGroupId:
        Ref: SecurityGroup
      SourceCidrIp: 0.0.0.0/0
      IpProtocol: tcp
      NicType: intranet
      PortRange: 22/22
  SecurityGroupIngress_80:
    Type: ALIYUN::ECS::SecurityGroupIngress
    Properties:
      SecurityGroupId:
        Ref: SecurityGroup
      SourceCidrIp: 0.0.0.0/0
      IpProtocol: tcp
      NicType: intranet
      PortRange: 80/80
  SecurityGroupIngress_3306:
    Type: ALIYUN::ECS::SecurityGroupIngress
    Properties:
      SecurityGroupId:
        Ref: SecurityGroup
      SourceCidrIp: 0.0.0.0/0
      IpProtocol: tcp
      NicType: intranet
      PortRange: 3306/3306
  SecurityGroupIngress_443:
    Type: ALIYUN::ECS::SecurityGroupIngress
    Properties:
      SecurityGroupId:
        Ref: SecurityGroup
      SourceCidrIp: 0.0.0.0/0
      IpProtocol: tcp
      NicType: intranet
      PortRange: 443/443
  VpcEip:
    Type: ALIYUN::VPC::EIP
    Properties:
      Bandwidth: 50
      InstanceChargeType: Postpaid
      InternetChargeType: PayByTraffic
  WaitConditionHandle:
    Type: ALIYUN::ROS::WaitConditionHandle
    Properties: {}
  RosWaitCondition:
    Type: ALIYUN::ROS::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: WaitConditionHandle
      Timeout: 7200
  EcsInstance:
    Type: ALIYUN::ECS::Instance
    Properties:
      VpcId:
        Ref: Vpc
      VSwitchId:
        Ref: VSwitch
      SecurityGroupId:
        Ref: SecurityGroup
      ImageId: centos_7_8
      InstanceType:
        Ref: InstanceType
      SystemDiskCategory:
        Ref: SystemDiskCategory
      Password:
        Ref: InstancePassword
      IoOptimized: optimized
      AllocatePublicIP: false
  VpcEipAssociation:
    Type: ALIYUN::VPC::EIPAssociation
    Properties:
      InstanceId:
        Ref: EcsInstance
      AllocationId:
        Ref: VpcEip
    DependsOn:
    - EcsInstance
    - VpcEip
  InstallWordpress:
    Type: ALIYUN::ECS::RunCommand
    Properties:
      InstanceIds:
      - Ref: EcsInstance
      Type: RunShellScript
      Sync: true
      Timeout: 7200
      CommandContent:
        Fn::Sub: "#!/bin/bash\nif [ ! -f .ros.provision ]; then\n  echo \"Name: 手动搭建WordPress（CentOS\
          \ 7）\" > .ros.provision\nfi\n\nname=$(grep \"^Name:\" .ros.provision | awk\
          \ -F':' '{print $2}' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n\
          if [[ \"$name\" != \"手动搭建WordPress（CentOS 7）\" ]]; then\n  echo \"当前实例已使用过\\\
          \"$name\\\"教程的一键配置，不能再使用本教程的一键配置\"\n  ${WaitConditionHandle.CurlCli} --data-binary\
          \ \"{\\\"status\\\": \\\"FAILURE\\\", \\\"reason\\\": \\\"The current instance\
          \ has already applied the configuration of the \\\\\\\"$name\\\\\\\" tutorial,\
          \ and the configuration of this tutorial can no longer be applied.\\\"}\"\
          \n  exit 0\nfi\n\necho \"#########################\"\necho \"# Check Network\"\
          \necho \"#########################\"\nping -c 2 -W 2 aliyun.com > /dev/null\n\
          if [[ $? -ne 0 ]]; then\n  echo \"当前实例无法访问公网\"\n  ${WaitConditionHandle.CurlCli}\
          \ --data-binary \"{\\\"status\\\": \\\"FAILURE\\\", \\\"reason\\\": \\\"\
          The current instance cannot access the public network.\\\"}\"\n  exit 0\n\
          fi\n\nif ! grep -q \"^Step1: Prepare Environment$\" .ros.provision; then\n\
          \  echo \"#########################\"\n  echo \"# Prepare Environment\"\n\
          \  echo \"#########################\"\n  systemctl status firewalld\n  systemctl\
          \ stop firewalld\n  echo \"Step1: Prepare Environment\" >> .ros.provision\n\
          else\n  echo \"#########################\"\n  echo \"# Environment has been\
          \ ready\"\n  echo \"#########################\"\nfi\n\nif ! grep -q \"^Step2:\
          \ Install Nginx$\" .ros.provision; then\n  echo \"#########################\"\
          \n  echo \"# Install Nginx\"\n  echo \"#########################\"\n  yum\
          \ -y install nginx\n  nginx -v\n  echo \"Step2: Install Nginx\" >> .ros.provision\n\
          else\n  echo \"#########################\"\n  echo \"# Nginx has been installed\"\
          \n  echo \"#########################\"\nfi\n\nif ! grep -q \"^Step3: Install\
          \ MySQL$\" .ros.provision; then\n  echo \"#########################\"\n\
          \  echo \"# Install MySQL\"\n  echo \"#########################\"\n  rpm\
          \ -Uvh  https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\n\
          \  yum -y install mysql-community-server --nogpgcheck\n  mysql -V\n  systemctl\
          \ start mysqld\n  systemctl enable mysqld\n  systemctl daemon-reload\n \
          \ echo \"Step3: Install MySQL\" >> .ros.provision\nelse\n  echo \"#########################\"\
          \n  echo \"# MySQL has been installed\"\n  echo \"#########################\"\
          \nfi\n\nif ! grep -q \"^Step4: Install PHP$\" .ros.provision; then\n  echo\
          \ \"#########################\"\n  echo \"# Install PHP\"\n  echo \"#########################\"\
          \n  yum install -y \\\n    https://mirrors.aliyun.com/ius/ius-release-el7.rpm\
          \ \\\n    https://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm\n\
          \  rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n \
          \ yum -y install php70w-devel php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64\
          \ php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64\
          \  php70w-pdo.x86_64   php70w-mysqlnd  php70w-fpm php70w-opcache php70w-pecl-redis\
          \ php70w-pecl-mongodb\n  php -v\n  echo \"Step4: Install PHP\" >> .ros.provision\n\
          else\n  echo \"#########################\"\n  echo \"# PHP has been installed\"\
          \n  echo \"#########################\"\nfi\n\nif ! grep -q \"^Step5: Config\
          \ Nginx$\" .ros.provision; then\n  echo \"#########################\"\n\
          \  echo \"# Config Nginx\"\n  echo \"#########################\"\n  cp /etc/nginx/nginx.conf\
          \ /etc/nginx/nginx.conf.bak\n  cat > /etc/nginx/nginx.conf << \\EOF\n# For\
          \ more information on configuration, see:\n#   * Official English Documentation:\
          \ http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\
          \nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\n\
          pid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\n\
          include /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections\
          \ 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user\
          \ [$time_local] \"$request\" '\n                      '$status $body_bytes_sent\
          \ \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"\
          ';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile \
          \           on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n\
          \    keepalive_timeout   65;\n    types_hash_max_size 4096;\n\n    include\
          \             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\
          \n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n\
          \    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    #\
          \ for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server\
          \ {\n        listen       80;\n        listen       [::]:80;\n        server_name\
          \  _;\n        root         /usr/share/nginx/html/wordpress;\n\n       \
          \ # Load configuration files for the default server block.\n        include\
          \ /etc/nginx/default.d/*.conf;\n\n        location / {\n            index\
          \ index.php index.html index.htm;\n        }\n\n        location ~ .php$\
          \ {\n            root /usr/share/nginx/html/wordpress;    # 将/usr/share/nginx/html替换为您的网站根目录，本文使用/usr/share/nginx/html作为网站根目录。\n\
          \            fastcgi_pass 127.0.0.1:9000;   # Nginx通过本机的9000端口将PHP请求转发给PHP-FPM进行处理。\n\
          \            fastcgi_index index.php;\n            fastcgi_param  SCRIPT_FILENAME\
          \  $document_root$fastcgi_script_name;\n            include fastcgi_params;\
          \   # Nginx调用fastcgi接口处理PHP请求。\n        }\n\n        error_page 404 /404.html;\n\
          \        location = /404.html {\n        }\n\n        error_page 500 502\
          \ 503 504 /50x.html;\n        location = /50x.html {\n        }\n    }\n\
          \n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen\
          \       443 ssl http2;\n#        listen       [::]:443 ssl http2;\n#   \
          \     server_name  _;\n#        root         /usr/share/nginx/html;\n#\n\
          #        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key\
          \ \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n\
          #        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n\
          #        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration\
          \ files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n\
          #\n#        error_page 404 /404.html;\n#            location = /40x.html\
          \ {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#  \
          \          location = /50x.html {\n#        }\n#    }\n\n}\nEOF\n  systemctl\
          \ start nginx\n  systemctl enable nginx\n  echo \"Step5: Config Nginx\"\
          \ >> .ros.provision\nelse\n  echo \"#########################\"\n  echo\
          \ \"# Nginx has been configured\"\n  echo \"#########################\"\n\
          fi\n\nif ! grep -q \"^Step6: Config MySQL$\" .ros.provision; then\n  echo\
          \ \"#########################\"\n  echo \"# Config MySQL\"\n  echo \"#########################\"\
          \n  export MYSQL_PWD=`grep \"temporary password\" /var/log/mysqld.log |\
          \ awk '{print $NF}'`\n  mysql -uroot -p$MYSQL_PWD --connect-expired-password\
          \ -e 'set global validate_password_policy=0;'\n  mysql -uroot -p$MYSQL_PWD\
          \ --connect-expired-password -e 'set global validate_password_length=1;'\n\
          \  mysqladmin -uroot password '${DBPassword}'\n  export MYSQL_PWD='${DBPassword}'\n\
          \  mysql -uroot -e \"GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED\
          \ BY '${DBPassword}'\"\n  echo CREATE DATABASE '${DBName}'\\; >> /tmp/setup.mysql\n\
          \  echo CREATE user \\\"${DBUser}\\\"@\"localhost\" identified by \\\"${DBPassword}\\\
          \"\\; >> /tmp/setup.mysql\n  echo GRANT ALL privileges ON '${DBName}'.*\
          \ TO \\\"${DBUser}\\\"@\"localhost\" IDENTIFIED BY \\\"${DBPassword}\\\"\
          \\; >> /tmp/setup.mysql\n  echo GRANT ALL PRIVILEGES ON *.* TO \\\"${DBUser}\\\
          \"@\\\"%\\\" IDENTIFIED BY \\\"${DBPassword}\\\" WITH GRANT OPTION\\; >>\
          \ /tmp/setup.mysql\n  echo FLUSH privileges\\;>> /tmp/setup.mysql\n  chmod\
          \ 400 /tmp/setup.mysql\n  mysql -u root --password='${DBPassword}' < /tmp/setup.mysql\
          \    \n  echo server-id=1 >> /etc/my.cnf\n  echo log-bin=mysql_bin >> /etc/my.cnf\n\
          \  systemctl restart mysqld\n  echo \"Step6: Config MySQL\" >> .ros.provision\n\
          else\n  echo \"#########################\"\n  echo \"# MySQL has been configured\"\
          \n  echo \"#########################\"\nfi\n\nif ! grep -q \"^Step5: Config\
          \ PHP$\" .ros.provision; then\n  echo \"#########################\"\n  echo\
          \ \"# Config PHP\"\n  echo \"#########################\"\n  echo \"<?php\
          \ phpinfo(); ?>\" > /usr/share/nginx/html/phpinfo.php\n  systemctl start\
          \ php-fpm\n  systemctl enable php-fpm\n  echo \"Step5: Config PHP\" >> .ros.provision\n\
          else\n  echo \"#########################\"\n  echo \"# PHP has been configured\"\
          \n  echo \"#########################\"\nfi\n\nif ! grep -q \"^Step6: Install\
          \ wordpress$\" .ros.provision; then\n  echo \"#########################\"\
          \n  echo \"# Install wordpress\"\n  echo \"#########################\"\n\
          \  yum -y install wordpress\n  echo \"Step6: Install wordpress\" >> .ros.provision\n\
          else\n  echo \"#########################\"\n  echo \"# wordpress has been\
          \ installed\"\n  echo \"#########################\"\nfi\n\nif ! grep -q\
          \ \"^Step7: Config wordpress$\" .ros.provision; then\n  echo \"#########################\"\
          \n  echo \"# Config wordpress\"\n  echo \"#########################\"\n\
          \  mv /usr/share/wordpress /usr/share/nginx/html/wordpress\n  cd /usr/share/nginx/html/wordpress\n\
          \  ln -snf /etc/wordpress/wp-config.php wp-config.php\n  sed -i \"s/database_name_here/${DBName}/\"\
          \ wp-config.php\n  sed -i \"s/username_here/${DBUser}/\" wp-config.php\n\
          \  sed -i \"s/password_here/${DBPassword}/\" wp-config.php\n  echo \"Step7:\
          \ Config wordpress\" >> .ros.provision\nelse\n  echo \"#########################\"\
          \n  echo \"# wordpress has been configured\"\n  echo \"#########################\"\
          \nfi\n\nsystemctl restart nginx\n${WaitConditionHandle.CurlCli} --data-binary\
          \ '{\"status\": \"SUCCESS\"}'"
    DependsOn:
    - SecurityGroupIngress_22
    - SecurityGroupIngress_443
    - SecurityGroupIngress_80
    - VpcEipAssociation
  RdsDBInstance:
    Type: ALIYUN::RDS::DBInstance
    Properties:
      ZoneId:
        Ref: ZoneId
      VpcId:
        Ref: Vpc
      VSwitchId:
        Ref: VSwitch
      DBInstanceClass:
        Ref: DBInstanceClass
      DBInstanceStorage: 50
      Engine: MySQL
      EngineVersion: '8.0'
      MasterUserPassword:
        Ref: RDSDBPassword
      MasterUserType: Super
      MasterUsername:
        Ref: RDSDBUser
      Category: HighAvailability
      DBInstanceStorageType: cloud_essd
      SecurityIPList: 0.0.0.0/0
  DtsMigrationJob:
    Type: ALIYUN::DTS::MigrationJob
    Properties:
      DestinationEndpoint:
        EngineName: MySQL
        InstanceID:
          Ref: RdsDBInstance
        InstanceType: RDS
        Password:
          Ref: RDSDBPassword
        Port: '3306'
        Region:
          Ref: ALIYUN::Region
        UserName:
          Ref: RDSDBUser
      MigrationJobClass:
        Ref: DtsMigrationJobClass
      MigrationJobName:
        Ref: DtsMigrationJobName
      MigrationMode:
        DataIntialization: true
        DataSynchronization: true
        StructureIntialization: true
      MigrationObject:
      - DBName:
          Ref: DBName
      SourceEndpoint:
        EngineName: MySQL
        IP:
          Fn::GetAtt:
          - VpcEip
          - EipAddress
        InstanceID:
          Ref: EcsInstance
        InstanceType: ECS
        Password:
          Ref: DBPassword
        Port: '3306'
        Region:
          Ref: ALIYUN::Region
        UserName:
          Ref: DBUser
    DependsOn:
    - InstallWordpress
    - RdsDBInstance
    - RosWaitCondition
Outputs:
  WordPressUrl:
    Description: Wordpress default address.
    Value:
      Fn::Sub:
      - http://${IP}
      - IP:
          Fn::GetAtt:
          - VpcEip
          - EipAddress
  RdsInstanceInnerConnectionString:
    Description:
      en: RDS Intranet connection string.
      zh-cn: RDS内网连接串。
    Value:
      Fn::GetAtt:
      - RdsDBInstance
      - InnerConnectionString
Metadata:
  ALIYUN::ROS::Interface:
    ParameterGroups:
    - Parameters:
      - SelectExistECS
      - ECSInstanceId
      - ZoneId
      - InstanceType
      - SystemDiskCategory
      - InstancePassword
      - DBName
      - DBUser
      - DBPassword
      Label:
        default: ECS
    - Parameters:
      - DBInstanceClass
      - RDSDBUser
      - RDSDBPassword
      Label:
        default: RDS
    - Parameters:
      - DtsMigrationJobClass
      - DtsMigrationJobName
      Label:
        default: DtsMigrationJob
    TemplateTags:
    - acs:technical-solution:database:WordPress网站数据库上云
