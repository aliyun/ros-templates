ROSTemplateFormatVersion: '2015-09-01'
Description:
  zh-cn: 创建VPC、ECS实例、DashVector集群，配置安全组和网络，部署基于DashVector和通义千问的问答服务应用。
  en: Create a Virtual Private Cloud (VPC), Elastic Compute Service (ECS) instances,
    and DashVector cluster, configure security groups and networking, and deploy a
    question-and-answer service application based on DashVector and Qwen.
Parameters:
  DashScopeApiKey:
    Type: String
    Label:
      en: DashScope API-KEY
      zh-cn: DashScope API-KEY
    Description:
      zh-cn: 开通灵积模型服务，并获得 API-KEY。请参考： <a href="https://help.aliyun.com/zh/dashscope/developer-reference/activate-dashscope-and-create-an-api-key"  target="_blank">开通DashScope并创建API-KEY</a>。
      en: 'Activate DashScope and obtain the API-KEY. Please refer to:  <a href="https://help.aliyun.com/zh/dashscope/developer-reference/activate-dashscope-and-create-an-api-key"  target="_blank">Activate
        DashScope and create API-KEY</a>.'
    AssociationProperty: ALIYUN::DashScope::ApiKey
  DashVectorApiKey:
    Type: String
    Label:
      en: DashVector API-KEY
      zh-cn: DashVector API-KEY
    Description:
      zh-cn: 开通DashVector向量检索服务，并获得 API-KEY。请参考： <a href="https://help.aliyun.com/document_detail/2510230.html"  target="_blank">开通DashVector并创建API-KEY</a>。
      en: 'Activate DashVector and obtain the API-KEY. Please refer to:  <a href="https://help.aliyun.com/document_detail/2510230.html"  target="_blank">Activate
        DashVector and create API-KEY</a>.'
    AssociationProperty: ALIYUN::DashVector::ApiKey
  ClusterName:
    Type: String
    Label:
      en: Name of DashVector Cluster
      zh-cn: DashVector集群名称
    Description:
      zh-cn: 本方案会创建一个免费版的集群，如果您账号下已经创建好了免费版的集群，请输入免费版集群的名称。
      en: This solution will create a free version cluster. If you have already created  a
        free version cluster under your account, please enter the name of the free
        version cluster.
    ConstraintDescription:
      zh-cn: 由大小写字母、数字、下划线(_)、中划线(-)组成，长度[3, 32]。
      en: It consists of uppercase and lowercase letters, numbers, underline (_),
        and dash (-). The length is [3, 32]
    AssociationProperty: AutoCompleteInput
    AssociationPropertyMetadata:
      Length: 5
      Prefix: exclusive-qa-server-
      CharacterClasses:
      - Class: lowercase
        min: 1
    AllowedPattern: '[-a-z0-9_]{3,32}'
  ZoneId:
    Type: String
    Label:
      en: Availability Zone
      zh-cn: 可用区
    AssociationProperty: ALIYUN::ECS::Instance::ZoneId
    AssociationPropertyMetadata:
      AutoSelectFirst: true
  InstanceType:
    Type: String
    Label:
      en: Instance Type
      zh-cn: 实例规格
    Description:
      zh-cn: 本方案会创建一个抢占式实例，并且自动部署专属问答服务。
      en: This solution will create a spot instance and automatically deploy a  exclusive
        question and answer service.
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    AssociationPropertyMetadata:
      SpotStrategy: SpotAsPriceGo
      InstanceChargeType: PostPaid
      SystemDiskCategory: cloud_essd
      ZoneId: ${ZoneId}
    Default: ecs.c7.large
  InstancePassword:
    Type: String
    Label:
      en: Instance Password
      zh-cn: 实例密码
    Description:
      en: Server login password, Length 8-30, must contain three(Capital letters,
        lowercase letters, numbers, ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol
        in)
      zh-cn: 服务器登录密码,长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）
    ConstraintDescription:
      en: Length 8-30, must contain three(Capital letters, lowercase letters, numbers,
        ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ Special symbol in)
      zh-cn: 长度8-30，必须包含三项（大写字母、小写字母、数字、 ()`~!@#$%^&*_-+=|{}[]:;'<>,.?/ 中的特殊符号）
    AssociationProperty: ALIYUN::ECS::Instance::Password
    Default: null
    NoEcho: true
Resources:
  Vpc:
    Type: ALIYUN::ECS::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
  VSwitch:
    Type: ALIYUN::ECS::VSwitch
    Properties:
      ZoneId:
        Ref: ZoneId
      VpcId:
        Ref: Vpc
      CidrBlock: 192.168.0.0/24
  SecurityGroup:
    Type: ALIYUN::ECS::SecurityGroup
    Properties:
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
      - PortRange: 22/22
        SourceCidrIp: 0.0.0.0/0
        IpProtocol: tcp
      - PortRange: 5000/5000
        SourceCidrIp: 0.0.0.0/0
        IpProtocol: tcp
  EcsInstance:
    Type: ALIYUN::ECS::InstanceGroup
    Properties:
      ZoneId:
        Ref: ZoneId
      VpcId:
        Ref: Vpc
      VSwitchId:
        Ref: VSwitch
      SecurityGroupId:
        Ref: SecurityGroup
      ImageId: aliyun_3_9_x64_20G_alibase_
      InstanceName: dashVector
      InstanceType:
        Ref: InstanceType
      SystemDiskCategory: cloud_essd
      MaxAmount: 1
      InternetMaxBandwidthOut: 100
      SpotStrategy: SpotAsPriceGo
      Password:
        Ref: InstancePassword
  DashVectorCluster:
    Type: ALIYUN::DashVector::Cluster
    Properties:
      IgnoreExisting: true
      ReplicaCount: 1
      ClusterName:
        Ref: ClusterName
      ClusterType: Serverless
  RunCommand:
    Type: ALIYUN::ECS::RunCommand
    Properties:
      InstanceIds:
        Fn::GetAtt:
        - EcsInstance
        - InstanceIds
      Type: RunShellScript
      Sync: true
      Timeout: 3600
      CommandContent:
        Fn::Sub: "#!/bin/bash\n\n# script exit code:\n# 0 - success\n# 1 - unsupported\
          \ system\n# 2 - network not available\n# 3 - failed to git clone\n# 4 -\
          \ failed to init python environment\n# 5 - failed to embedding data\n# 6\
          \ - failed to init git\n# 7 - failed to run flask app\n\n# 环境变量配置\nexport\
          \ PATH=/usr/local/bin:$PATH\nexport DASHSCOPE_API_KEY=${DashScopeApiKey}\n\
          export DASHVECTOR_API_KEY=${DashVectorApiKey}\nexport DASHVECTOR_CLUSTER_ENDPOINT=${DashVectorCluster.Endpoint}\n\
          \n# GitHub 仓库 URL\nREPO_URL=\"https://github.com/shijiebei2009/CEC-Corpus.git\"\
          \n# GitRepoName\nREPO_NAME=\"CEC-Corpus\"\n# 最大尝试次数\nMAX_RETRIES=10\n# 当前尝试次数\n\
          ATTEMPT_NUM=1\n# 等待时间 (秒) 在重试之前\nSLEEP_SECONDS=10\n# CollectionName\nCOLLECTION_NAME=\"\
          news_embeddings\"\n\nfunction unsupported_system() {\n    log_fatal 1 \"\
          Unsupported System: $1\"\n}\n\nfunction log_info() {\n    printf \"%s [INFO]\
          \ %s\\n\" \"$(date '+%Y-%m-%d %H:%M:%S')\" \"$1\"\n}\n\nfunction log_error()\
          \ {\n    printf \"%s [ERROR] %s\\n\" \"$(date '+%Y-%m-%d %H:%M:%S')\" \"\
          $1\"\n}\n\nfunction log_fatal() {\n    printf \"\\n========================================================================\\\
          n\"\n    printf \"%s [FATAL] %s\\n\" \"$(date '+%Y-%m-%d %H:%M:%S')\" \"\
          $2\"\n    printf \"\\n========================================================================\\\
          n\"\n    exit $1\n}\n\nfunction debug_exec(){\n    local cmd=\"$@\"\n  \
          \  log_info \"$cmd\"\n    eval \"$cmd\"\n    ret=$?\n    echo \"\"\n   \
          \ log_info \"$cmd, exit code: $ret\"\n    return $ret\n}\n\nfunction check_network_available()\
          \ {\n    log_info \"ping github.com ...\"\n    if ! debug_exec ping -c 4\
          \ github.com; then\n        log_fatal 2 \"Could not connect to https://github.com\"\
          \n    fi\n}\n\nfunction clone_repo() {\n    log_info \"init git\"\n    if\
          \ ! debug_exec yum install -y git && git init; then\n        log_fatal 6\
          \ \"failed to init git\"\n    fi\n\n    rm -rf $REPO_NAME\n    until debug_exec\
          \ git clone $REPO_URL; do\n        if [ \"$ATTEMPT_NUM\" -ge \"$MAX_RETRIES\"\
          \ ]; then\n            log_fatal 3 \"Reached maximum number of retries,\
          \ aborting.\"\n        fi\n        log_error \"Attempt $ATTEMPT_NUM failed!\
          \ Trying again in $SLEEP_SECONDS seconds...\"\n        sleep \"$SLEEP_SECONDS\"\
          \n        ATTEMPT_NUM=$((ATTEMPT_NUM+1))\n    done\n}\n\nfunction init_env()\
          \ {\n    log_info \"init python environment\"\n    yum install -y python3.8\n\
          \    ln -sf /usr/bin/python3.8 /usr/bin/python\n    python -m ensurepip\n\
          \    python -m pip install --upgrade pip\n    python -m pip install -r requirements.txt\n\
          }\n\nfunction embedding() {\n    log_info \"embedding data\"\n    if ! debug_exec\
          \ python embedding.py; then\n        log_fatal 5 \"failed to embedding data.\"\
          \n    fi\n}\n\nlog_info \"System Information:\"\nif ! lsb_release -a; then\n\
          \    unsupported_system\nfi;\necho \"\"\n\ncheck_network_available\n\ncat\
          \ << 'EOF' > requirements.txt\nflask==3.0.2\nPySocks==1.7.1\ndashscope==1.17.0\n\
          dashvector==1.0.14\n\nEOF\n\nif ! debug_exec init_env; then\n    log_fatal\
          \ 4 \"failed to init python environment\"\nfi\n\ncat << EOF > embedding.py\n\
          # -*- coding: utf-8 -*-\n\nimport os\nimport dashscope\nfrom dashscope import\
          \ TextEmbedding\nfrom dashvector import Client, Doc\n\n\ndef prepare_data(path,\
          \ batch_size=25):\n    batch_docs = []\n    for file in os.listdir(path):\n\
          \        with open(path + '/' + file, 'r', encoding='utf-8') as f:\n   \
          \         batch_docs.append(f.read())\n            if len(batch_docs) ==\
          \ batch_size:\n                yield batch_docs\n                batch_docs\
          \ = []\n\n    if batch_docs:\n        yield batch_docs\n\n\ndef generate_embeddings(news):\n\
          \    rsp = TextEmbedding.call(\n        model=TextEmbedding.Models.text_embedding_v1,\n\
          \        input=news\n    )\n    embeddings = [record['embedding'] for record\
          \ in rsp.output['embeddings']]\n    return embeddings if isinstance(news,\
          \ list) else embeddings[0]\n\n\nif __name__ == '__main__':\n    dashscope.api_key\
          \ = os.environ.get('DASHSCOPE_API_KEY')\n    collection_name = '$COLLECTION_NAME'\n\
          \    # 初始化 dashvector client\n    client = Client(\n        api_key=os.environ.get('DASHVECTOR_API_KEY'),\n\
          \        endpoint=os.environ.get('DASHVECTOR_CLUSTER_ENDPOINT')\n    )\n\
          \n    try:\n        del_rsp = client.delete(collection_name)\n        assert\
          \ del_rsp, del_rsp\n    except AssertionError as e:\n        if e.args[0].code\
          \ != -2021:\n            raise\n\n    # 创建集合：指定集合名称和向量维度, text_embedding_v1\
          \ 模型产生的向量统一为 1536 维\n    rsp = client.create(collection_name, 1536)\n  \
          \  assert rsp, rsp\n\n    # 加载语料\n    id = 0\n    collection = client.get(collection_name)\n\
          \    for news in list(prepare_data('CEC-Corpus/raw corpus/allSourceText')):\n\
          \        ids = [id + i for i, _ in enumerate(news)]\n        id += len(news)\n\
          \n        vectors = generate_embeddings(news)\n        # 写入 dashvector 构建索引\n\
          \        rsp = collection.upsert(\n            [\n                Doc(id=str(id),\
          \ vector=vector, fields={\"raw\": doc})\n                for id, vector,\
          \ doc in zip(ids, vectors, news)\n            ]\n        )\n        assert\
          \ rsp, rsp\n\nEOF\n\n\ncat << EOF > run.py\n# -*- coding: utf-8 -*-\n\n\
          import os\nimport uuid\nfrom flask import Flask, request, render_template_string,\
          \ redirect, url_for, session\nimport dashscope\nfrom dashscope import TextEmbedding,\
          \ Generation\nfrom dashvector import Client\n\napp = Flask(__name__)\napp.secret_key\
          \ = uuid.uuid4().hex\n\n# HTML 模板\nHTML_TEMPLATE = '''\n<!doctype html>\n\
          <html lang=\"en\">\n  <head>\n    <title>DashVector</title>\n    <style>\n\
          \      body {\n        font-family: Arial, sans-serif;\n        margin:\
          \ 0;\n        padding: 0;\n        background: #f7f7f7;\n      }\n     \
          \ .container {\n        margin: auto;\n        padding: 20px;\n        max-width:\
          \ 600px;\n        background: white;\n        box-shadow: 0 0 10px rgba(0,\
          \ 0, 0, 0.1);\n      }\n      h1 {\n        color: #333;\n      }\n    \
          \  input[type=\"text\"], textarea {\n        width: 100%;\n        padding:\
          \ 10px;\n        margin: 10px 0;\n        border: 1px solid #ddd;\n    \
          \    border-radius: 5px;\n        box-sizing: border-box; /* 加上这个属性，防止 padding\
          \ 喧嚣计算宽度 */\n      }\n      input[type=\"submit\"] {\n        background:\
          \ #5cb85c;\n        color: white;\n        padding: 10px 20px;\n       \
          \ margin: 10px 0;\n        border: none;\n        border-radius: 5px;\n\
          \        cursor: pointer;\n      }\n      input[type=\"submit\"]:hover {\n\
          \        background: #4cae4c;\n      }\n      .loader {\n        border:\
          \ 5px solid #f3f3f3; /* Light grey */\n        border-top: 5px solid #3498db;\
          \ /* Blue */\n        border-radius: 50%;\n        width: 50px;\n      \
          \  height: 50px;\n        animation: spin 2s linear infinite;\n        margin:\
          \ auto;\n        display: none;\n      }\n\n      @keyframes spin {\n  \
          \      0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg);\
          \ }\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\"\
          >\n      <h1>基于专属知识的问答服务</h1>\n      <form method=\"post\" id=\"textForm\"\
          >\n        <label for=\"inputText\">请输入问题：</label>\n        <input type=\"\
          text\" id=\"inputText\" name=\"inputText\" placeholder=\"Enter...\" value=\"\
          {{ input }}\">\n        <input type=\"submit\" value=\"Submit\">\n     \
          \   <!-- 加载动画 -->\n        <div class=\"loader\" id=\"loader\"></div>\n\
          \      </form>\n      {% if output %}\n      <h2>回答：</h2>\n      <textarea\
          \ id=\"outputText\" name=\"outputText\" rows=\"4\" disabled>{{ output }}</textarea>\n\
          \      {% endif %}\n    </div>\n\n    <script>\n      // 使用 JavaScript 在提交表单时显示加载动画\n\
          \      document.getElementById('textForm').onsubmit = function() {\n   \
          \     document.getElementById('loader').style.display = 'block';\n     \
          \ };\n    </script>\n  </body>\n</html>\n'''\n\n\n@app.route('/', methods=['GET',\
          \ 'POST'])\ndef home():\n    output_text = None\n    input_text = \"海南安定追尾事故，发生在哪里？原因是什么？人员伤亡情况如何\"\
          \n    if 'output' in session:\n        output_text = session.pop('output',\
          \ None)\n        input_text = session.get('input', None)\n\n    if request.method\
          \ == 'POST':\n        input_text = request.form.get('inputText')\n     \
          \   output_text = get_answers(input_text)\n        session['output'] = output_text\n\
          \        session['input'] = input_text\n        return redirect(url_for('home'))\n\
          \n    return render_template_string(HTML_TEMPLATE, output=output_text, input=input_text)\n\
          \n\ndef get_answers(input_text):\n    dashscope.api_key = os.environ.get('DASHSCOPE_API_KEY')\n\
          \    # question = '海南安定追尾事故，发生在哪里？原因是什么？人员伤亡情况如何？'\n    context = search_relevant_news(input_text)\n\
          \    return answer_question(input_text, context)\n\n\ndef search_relevant_news(question):\n\
          \    # 初始化 dashvector client\n    client = Client(\n      api_key=os.environ.get('DASHVECTOR_API_KEY'),\n\
          \      endpoint=os.environ.get('DASHVECTOR_CLUSTER_ENDPOINT')\n    )\n\n\
          \    # 获取刚刚存入的集合\n    collection = client.get('$COLLECTION_NAME')\n    assert\
          \ collection, collection\n\n    # 向量检索：指定 topk = 1\n    rsp = collection.query(generate_embeddings(question),\
          \ output_fields=['raw'], topk=1)\n    assert rsp, rsp\n    return rsp.output[0].fields['raw']\n\
          \n\ndef generate_embeddings(news):\n    rsp = TextEmbedding.call(\n    \
          \    model=TextEmbedding.Models.text_embedding_v1,\n        input=news\n\
          \    )\n    embeddings = [record['embedding'] for record in rsp.output['embeddings']]\n\
          \    return embeddings if isinstance(news, list) else embeddings[0]\n\n\n\
          def answer_question(question, context):\n    prompt = f'''请基于\\`\\`\\`内的内容回答问题。\"\
          \n    \\`\\`\\`\n    {context}\n    \\`\\`\\`\n    我的问题是：{question}。\n \
          \   '''\n\n    rsp = Generation.call(model='qwen-turbo', prompt=prompt)\n\
          \    return rsp.output.text\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0',\
          \ debug=True)\n\nEOF\n\nclone_repo\nembedding\n\nif ! debug_exec \"nohup\
          \ python run.py > output.log 2>&1 &\"; then\n    log_fatal  \"failed to\
          \ run flask app\"\nfi"
Outputs:
  WebUrl:
    Description:
      zh-cn: Web 访问地址。
      en: The Addresses of Web.
    Value:
      Fn::Sub:
      - http://${ServerAddress}:5000
      - ServerAddress:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - EcsInstance
            - PublicIps
  EcsLoginAddress:
    Description:
      zh-cn: ECS登录地址。
      en: Ecs login address.
    Value:
      Fn::Sub:
      - https://ecs-workbench.aliyun.com/?from=EcsConsole&instanceType=ecs&regionId=${Region}&instanceId=${InstanceId}
      - InstanceId:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - EcsInstance
            - InstanceIds
        Region:
          Ref: ALIYUN::Region
Metadata:
  ALIYUN::ROS::Interface:
    ParameterGroups:
    - Parameters:
      - DashScopeApiKey
      - DashVectorApiKey
      - ClusterName
      Label:
        default:
          en: ApiKey
          zh-cn: ApiKey配置
    - Parameters:
      - ZoneId
      - InstanceType
      - InstancePassword
      Label:
        default:
          en: Ecs Instance
          zh-cn: ECS实例配置
    TemplateTags:
    - acs:technical-solution:ai:向量检索与通义千问搭建专属问答服务-tech_solu_109
